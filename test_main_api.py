"""
Script para testar a inicializa√ß√£o da API principal com logs detalhados.
"""
import logging
import sys
import traceback
from pathlib import Path

# Configura√ß√£o de logging detalhada
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

def test_api_startup():
    """Testa a inicializa√ß√£o da API principal."""
    try:
        # Adiciona o diret√≥rio raiz ao path do Python
        project_root = str(Path(__file__).parent.absolute())
        if project_root not in sys.path:
            sys.path.insert(0, project_root)
        
        logger.info("üîç Verificando importa√ß√µes...")
        
        # Testa importa√ß√µes b√°sicas primeiro
        try:
            logger.info("  - Importando m√≥dulos b√°sicos...")
            import fastapi
            import uvicorn
            from fastapi import FastAPI
            logger.info("  ‚úÖ M√≥dulos b√°sicos importados com sucesso.")
        except ImportError as e:
            logger.error(f"  ‚ùå Falha ao importar m√≥dulos b√°sicos: {e}")
            logger.error(traceback.format_exc())
            return False
        
        # Tenta importar o m√≥dulo principal da API
        try:
            logger.info("  - Importando m√≥dulo api.main...")
            from api.main import create_app
            logger.info("  ‚úÖ M√≥dulo api.main importado com sucesso.")
        except Exception as e:
            logger.error(f"  ‚ùå Falha ao importar api.main: {e}")
            logger.error(traceback.format_exc())
            return False
        
        # Tenta criar a aplica√ß√£o
        try:
            logger.info("üöÄ Criando aplicativo FastAPI...")
            app = create_app()
            logger.info("‚úÖ Aplicativo criado com sucesso!")
            
            # Lista as rotas dispon√≠veis
            logger.info("\nüõ£Ô∏è  Rotas dispon√≠veis:")
            for route in app.routes:
                if hasattr(route, 'methods'):
                    methods = ", ".join(route.methods)
                    logger.info(f"  {methods}: {route.path}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao criar o aplicativo: {e}")
            logger.error(traceback.format_exc())
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erro inesperado: {e}")
        logger.error(traceback.format_exc())
        return False

if __name__ == "__main__":
    print("=" * 80)
    print("üîç INICIANDO TESTE DE INICIALIZA√á√ÉO DA API PRINCIPAL")
    print("=" * 80)
    
    if test_api_startup():
        print("\n" + "‚úÖ" * 20)
        print("‚úÖ TESTE CONCLU√çDO COM SUCESSO!")
        print("‚úÖ" * 20)
    else:
        print("\n" + "‚ùå" * 20)
        print("‚ùå FALHA AO INICIALIZAR A API. VERIFIQUE OS LOGS ACIMA.")
        print("‚ùå" * 20)
    
    print("\nPressione Enter para sair...")
    input()
