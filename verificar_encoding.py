import psycopg2
import sys
from getpass import getpass

def test_connection(host, port, dbname, user, password):
    try:
        # For√ßar codifica√ß√£o UTF-8
        conn = psycopg2.connect(
            host=host,
            port=port,
            dbname=dbname,
            user=user,
            password=password,
            client_encoding='UTF8'
        )
        
        with conn.cursor() as cur:
            # Verificar encoding do banco de dados
            print("\nüîç Verificando encoding dos bancos de dados...")
            cur.execute("SELECT datname, pg_encoding_to_char(encoding) FROM pg_database;")
            print("\nüî§ Encoding dos bancos de dados:")
            for db in cur.fetchall():
                print(f" - {db[0]}: {db[1]}")
            
            # Verificar collation
            print("\nüî° Verificando collation do banco 'apostapro_db'...")
            cur.execute("""
                SELECT datname, datcollate, datctype 
                FROM pg_database 
                WHERE datname = 'apostapro_db';
            """)
            collation = cur.fetchone()
            if collation:
                print("\nüìù Informa√ß√µes de Collation:")
                print(f" - Banco: {collation[0]}")
                print(f" - Collate: {collation[1]}")
                print(f" - Ctype: {collation[2]}")
            else:
                print("‚ö†Ô∏è  Banco de dados 'apostapro_db' n√£o encontrado!")
            
            # Verificar configura√ß√µes do servidor
            print("\n‚öôÔ∏è  Configura√ß√µes do servidor:")
            try:
                cur.execute("SHOW server_encoding;")
                print(f" - Server Encoding: {cur.fetchone()[0]}")
                
                cur.execute("SHOW client_encoding;")
                print(f" - Client Encoding: {cur.fetchone()[0]}")
                
                cur.execute("SHOW lc_collate;")
                print(f" - LC_COLLATE: {cur.fetchone()[0]}")
                
                cur.execute("SHOW lc_ctype;")
                print(f" - LC_CTYPE: {cur.fetchone()[0]}")
                
            except Exception as e:
                print(f"‚ö†Ô∏è  N√£o foi poss√≠vel verificar todas as configura√ß√µes: {e}")
            
        conn.close()
        return True
        
    except Exception as e:
        error_msg = str(e).encode('ascii', 'replace').decode('ascii')
        print(f"\n‚ùå Erro ao conectar: {error_msg}")
        
        # Tentar diagnosticar o erro
        if "password authentication failed" in str(e).lower():
            print("\nüîë Falha na autentica√ß√£o. Verifique o usu√°rio e senha.")
        elif "does not exist" in str(e).lower():
            print("\n‚ùì Banco de dados n√£o encontrado. Verifique o nome do banco.")
        elif "could not connect to server" in str(e).lower():
            print("\nüîå N√£o foi poss√≠vel conectar ao servidor. Verifique se o PostgreSQL est√° rodando.")
        
        return False

def main():
    print("üîç Verificador de Encoding do PostgreSQL")
    print("=" * 50)
    
    # Configura√ß√µes padr√£o
    config = {
        'host': 'localhost',
        'port': '5432',
        'dbname': 'postgres',
        'user': input("Usu√°rio (padr√£o: postgres): ") or "postgres",
        'password': getpass("Senha: ")
    }
    
    print("\nüîÑ Conectando ao banco de dados...")
    if test_connection(**config):
        print("\n‚úÖ Verifica√ß√£o conclu√≠da com sucesso!")
        
        print("\nüìå Recomenda√ß√µes:")
        print("1. O encoding do banco deve ser 'UTF8'")
        print("2. Para bancos em portugu√™s, o collate recomendado √© 'pt_BR.UTF-8'")
        print("3. Se precisar alterar o encoding, ser√° necess√°rio recriar o banco")
    else:
        print("\n‚ùå Falha na verifica√ß√£o. Verifique as mensagens de erro acima.")
        
        print("\nüîß Solu√ß√£o de problemas:")
        print("1. Verifique se o servi√ßo do PostgreSQL est√° rodando")
        print("2. Confirme se o usu√°rio e senha est√£o corretos")
        print("3. Tente conectar com o psql para testar as credenciais:")
        print(f"   psql -h localhost -U {config['user']} -d postgres")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nOpera√ß√£o cancelada pelo usu√°rio.")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {str(e)}")
    
    input("\nPressione Enter para sair...")
