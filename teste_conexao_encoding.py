import psycopg2
from psycopg2 import OperationalError
import sys

def testar_conexao_com_encoding():
    """Testa diferentes configura√ß√µes de encoding para a conex√£o com o PostgreSQL"""
    configs = [
        {
            'name': 'UTF-8 padr√£o',
            'conn_params': {
                'host': 'localhost',
                'port': 5432,
                'dbname': 'apostapro_db',
                'user': 'postgres',
                'password': 'postgres',
                'client_encoding': 'UTF8'
            }
        },
        {
            'name': 'LATIN1',
            'conn_params': {
                'host': 'localhost',
                'port': 5432,
                'dbname': 'apostapro_db',
                'user': 'postgres',
                'password': 'postgres',
                'client_encoding': 'LATIN1'
            }
        },
        {
            'name': 'WIN1252',
            'conn_params': {
                'host': 'localhost',
                'port': 5432,
                'dbname': 'apostapro_db',
                'user': 'postgres',
                'password': 'postgres',
                'client_encoding': 'WIN1252'
            }
        },
        {
            'name': 'Sem encoding espec√≠fico',
            'conn_params': {
                'host': 'localhost',
                'port': 5432,
                'dbname': 'apostapro_db',
                'user': 'postgres',
                'password': 'postgres'
            }
        }
    ]

    for config in configs:
        print(f"\nüîß Testando configura√ß√£o: {config['name']}")
        print(f"üìå Par√¢metros: {config['conn_params']}")
        
        try:
            # Tentar conex√£o com os par√¢metros atuais
            conn = psycopg2.connect(**config['conn_params'])
            
            # Se chegou aqui, a conex√£o foi bem-sucedida
            print("‚úÖ Conex√£o bem-sucedida!")
            
            # Obter informa√ß√µes do servidor
            with conn.cursor() as cur:
                # Vers√£o do PostgreSQL
                cur.execute("SELECT version();")
                print(f"üìä {cur.fetchone()[0]}")
                
                # Encoding atual
                cur.execute("SHOW server_encoding;")
                print(f"üî§ Server Encoding: {cur.fetchone()[0]}")
                
                cur.execute("SHOW client_encoding;")
                print(f"üî§ Client Encoding: {cur.fetchone()[0]}")
                
                # Verificar se h√° dados na tabela
                cur.execute("""
                    SELECT table_name 
                    FROM information_schema.tables 
                    WHERE table_schema = 'public';
                """)
                tabelas = [row[0] for row in cur.fetchall()]
                
                if tabelas:
                    print(f"\nüìã Tabelas encontradas ({len(tabelas)}):")
                    for tabela in tabelas[:10]:  # Mostrar no m√°ximo 10 tabelas
                        print(f" - {tabela}")
                    if len(tabelas) > 10:
                        print(f" - ... e mais {len(tabelas) - 10} tabelas")
                else:
                    print("\n‚ÑπÔ∏è  Nenhuma tabela encontrada no banco de dados.")
            
            conn.close()
            return True
            
        except OperationalError as e:
            print(f"‚ùå Erro de conex√£o: {e}")
        except UnicodeDecodeError as e:
            print(f"‚ùå Erro de decodifica√ß√£o: {e}")
        except Exception as e:
            print(f"‚ùå Erro inesperado: {e}")
    
    print("\n‚ùå Nenhuma das configura√ß√µes de encoding funcionou.")
    return False

if __name__ == "__main__":
    print("üîç Testando diferentes configura√ß√µes de encoding para conex√£o com o PostgreSQL")
    print("=" * 80)
    testar_conexao_com_encoding()
    input("\nPressione Enter para sair...")
