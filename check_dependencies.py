"""
Script para verificar as depend√™ncias necess√°rias para a API FastAPI.
"""
import sys
import subprocess
import pkg_resources

def check_python_version():
    """Verifica a vers√£o do Python."""
    print("\nüîç Verificando vers√£o do Python...")
    print(f"Vers√£o do Python: {sys.version}")
    if sys.version_info < (3, 8):
        print("‚ùå Vers√£o do Python inferior a 3.8. Por favor, atualize o Python.")
        return False
    print("‚úÖ Vers√£o do Python compat√≠vel.")
    return True

def check_package(package_name, min_version=None):
    """Verifica se um pacote est√° instalado e na vers√£o correta."""
    try:
        version = pkg_resources.get_distribution(package_name).version
        if min_version and pkg_resources.parse_version(version) < pkg_resources.parse_version(min_version):
            print(f"‚ö†Ô∏è  {package_name} est√° na vers√£o {version}, mas a vers√£o m√≠nima recomendada √© {min_version}")
            return False
        print(f"‚úÖ {package_name} {version} est√° instalado.")
        return True
    except pkg_resources.DistributionNotFound:
        print(f"‚ùå {package_name} n√£o est√° instalado.")
        return False

def install_package(package_name, min_version=None):
    """Instala um pacote usando pip."""
    print(f"\nüì¶ Instalando {package_name}...")
    try:
        if min_version:
            package_spec = f"{package_name}>={min_version}"
        else:
            package_spec = package_name
        subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade", package_spec])
        print(f"‚úÖ {package_name} instalado com sucesso.")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Falha ao instalar {package_name}: {e}")
        return False

def check_database_connection():
    """Verifica a conex√£o com o banco de dados."""
    print("\nüîç Verificando conex√£o com o banco de dados...")
    try:
        from Coleta_de_dados.database.config import SessionLocal
        from sqlalchemy import text
        
        db = SessionLocal()
        db.execute(text("SELECT 1"))
        print("‚úÖ Conex√£o com o banco de dados bem-sucedida.")
        return True
    except Exception as e:
        print(f"‚ùå Falha na conex√£o com o banco de dados: {e}")
        return False
    finally:
        if 'db' in locals():
            db.close()

def main():
    """Fun√ß√£o principal para verificar as depend√™ncias."""
    print("üîç Iniciando verifica√ß√£o de depend√™ncias...")
    
    # Verifica a vers√£o do Python
    if not check_python_version():
        print("\n‚ùå Por favor, atualize o Python para a vers√£o 3.8 ou superior.")
        return False
    
    # Lista de pacotes necess√°rios com vers√µes m√≠nimas
    required_packages = [
        ("fastapi", "0.68.0"),
        ("uvicorn", "0.15.0"),
        ("sqlalchemy", "1.4.0"),
        ("psycopg2-binary", "2.9.0"),
        ("pydantic", "1.8.0"),
        ("python-multipart", "0.0.5"),
        ("python-jose", "3.3.0"),
        ("passlib", "1.7.4"),
        ("python-dotenv", "0.19.0"),
        ("requests", "2.26.0"),
        ("beautifulsoup4", "4.10.0"),
        ("alembic", "1.7.0"),
        ("pytest", "6.2.5"),
    ]
    
    # Verifica os pacotes necess√°rios
    missing_packages = []
    for package, version in required_packages:
        if not check_package(package, version):
            missing_packages.append((package, version))
    
    # Instala os pacotes ausentes
    if missing_packages:
        print("\nüì¶ Instalando pacotes ausentes...")
        for package, version in missing_packages:
            install_package(package, version)
    else:
        print("\n‚úÖ Todos os pacotes necess√°rios est√£o instalados.")
    
    # Verifica a conex√£o com o banco de dados
    check_database_connection()
    
    print("\nüîç Verifica√ß√£o de depend√™ncias conclu√≠da.")
    return True

if __name__ == "__main__":
    main()
