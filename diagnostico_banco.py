#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de diagn√≥stico para verificar a conex√£o com o banco de dados e a exist√™ncia das tabelas.
"""
import sys
import os
import logging
from sqlalchemy import inspect, text, create_engine
from sqlalchemy.orm import sessionmaker

# Configura o encoding para UTF-8
import io
import sys
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')

# Configura o logging para exibir mensagens de depura√ß√£o
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# Adiciona o diret√≥rio raiz ao path para importar as configura√ß√µes
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Importa as configura√ß√µes do banco de dados
try:
    from Coleta_de_dados.database.config import db_manager
    print("‚úÖ M√≥dulo de configura√ß√£o do banco de dados importado com sucesso.")
except ImportError as e:
    print(f"‚ùå Erro ao importar configura√ß√µes do banco de dados: {e}")
    print("Verifique se o m√≥dulo 'Coleta_de_dados.database.config' existe e est√° acess√≠vel.")
    sys.exit(1)

def verificar_conexao():
    """Verifica se √© poss√≠vel conectar ao banco de dados."""
    try:
        # Tenta conectar ao banco de dados
        with db_manager.engine.connect() as conn:
            # Executa uma consulta simples para verificar a conex√£o
            result = conn.execute(text("SELECT version()"))
            db_version = result.scalar()
            print(f"‚úÖ Conex√£o bem-sucedida. Vers√£o do PostgreSQL: {db_version}")
            return True
    except Exception as e:
        print(f"‚ùå Falha ao conectar ao banco de dados: {e}")
        return False

def verificar_tabelas():
    """Verifica se as tabelas necess√°rias existem no banco de dados."""
    inspector = inspect(db_manager.engine)
    tabelas_necessarias = ['paises_clubes', 'clubes']
    tabelas_existentes = inspector.get_table_names()
    
    print("\nüîç Verificando tabelas no banco de dados:")
    
    todas_tabelas_existem = True
    for tabela in tabelas_necessarias:
        if tabela in tabelas_existentes:
            print(f"‚úÖ Tabela '{tabela}' existe.")
        else:
            print(f"‚ùå Tabela '{tabela}' N√ÉO encontrada.")
            todas_tabelas_existem = False
    
    if not todas_tabelas_existem:
        print("\n‚ÑπÔ∏è Algumas tabelas necess√°rias n√£o foram encontradas no banco de dados.")
    else:
        print("\n‚úÖ Todas as tabelas necess√°rias existem no banco de dados.")
    
    return todas_tabelas_existem

def verificar_dados_tabelas():
    """Verifica se h√° dados nas tabelas."""
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=db_manager.engine)
    session = SessionLocal()
    
    try:
        print("\nüìä Verificando dados nas tabelas:")
        
        # Verifica paises_clubes
        result = session.execute(text("SELECT COUNT(*) FROM paises_clubes"))
        count_paises = result.scalar()
        print(f"- paises_clubes: {count_paises} registros")
        
        # Verifica clubes
        result = session.execute(text("SELECT COUNT(*) FROM clubes"))
        count_clubes = result.scalar()
        print(f"- clubes: {count_clubes} registros")
        
        # Se houver clubes, lista alguns exemplos
        if count_clubes > 0:
            print("\nüìã Exemplos de clubes cadastrados:")
            result = session.execute(text("""
                SELECT c.id, c.nome, p.nome as pais 
                FROM clubes c 
                JOIN paises_clubes p ON c.pais_id = p.id 
                ORDER BY c.id LIMIT 5
            """))
            for clube in result.fetchall():
                print(f"- ID: {clube.id}, Nome: {clube.nome}, Pa√≠s: {clube.pais}")
        
        return count_paises > 0 and count_clubes > 0
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar dados das tabelas: {e}")
        return False
    finally:
        session.close()

def main():
    """Fun√ß√£o principal do script de diagn√≥stico."""
    print("üîç Iniciando diagn√≥stico do banco de dados...")
    
    # Verifica a conex√£o
    if not verificar_conexao():
        print("\n‚ùå N√£o foi poss√≠vel continuar com o diagn√≥stico devido a falha na conex√£o.")
        return False
    
    # Verifica as tabelas
    tabelas_ok = verificar_tabelas()
    
    # Se as tabelas existirem, verifica os dados
    if tabelas_ok:
        dados_ok = verificar_dados_tabelas()
        if dados_ok:
            print("\n‚úÖ Diagn√≥stico conclu√≠do com sucesso. O banco de dados parece estar configurado corretamente.")
        else:
            print("\n‚ö†Ô∏è O banco de dados est√° configurado, mas algumas tabelas podem estar vazias.")
    else:
        print("\n‚ùå Algumas tabelas necess√°rias n√£o foram encontradas no banco de dados.")
    
    return tabelas_ok

if __name__ == "__main__":
    main()
