#!/usr/bin/env python3
"""
Demonstra√ß√£o do Pipeline de Automa√ß√£o CI/CD
"""
import logging
import sys
import json
from pathlib import Path

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# Adicionar diret√≥rio pai ao path
sys.path.append(str(Path(__file__).parent))

def main():
    """Fun√ß√£o principal da demonstra√ß√£o"""
    print("üöÄ APOSTAPRO - Demonstra√ß√£o do Pipeline de Automa√ß√£o CI/CD")
    print("=" * 80)
    
    try:
        # Importar m√≥dulos
        from ml_models.automation_pipeline import (
            automation_pipeline,
            run_pipeline,
            get_pipeline_status,
            schedule_pipeline,
            enable_pipeline
        )
        
        print("‚úÖ M√≥dulos importados com sucesso")
        
        # 1. Verificar configura√ß√£o dos pipelines
        print("\n1Ô∏è‚É£ Verificando configura√ß√£o dos pipelines...")
        
        pipeline_configs = automation_pipeline.pipelines
        print(f"   üìä Total de pipelines configurados: {len(pipeline_configs)}")
        
        for name, config in pipeline_configs.items():
            status = "‚úÖ Habilitado" if config.enabled else "‚ùå Desabilitado"
            trigger = config.trigger_type
            schedule = config.schedule if config.trigger_type == 'schedule' else 'Manual'
            print(f"   ‚Ä¢ {name}: {status} | Trigger: {trigger} | Schedule: {schedule}")
        
        # 2. Verificar status atual dos pipelines
        print("\n2Ô∏è‚É£ Verificando status atual dos pipelines...")
        
        status = get_pipeline_status()
        if 'error' not in status:
            for pipeline_name, pipeline_status in status.items():
                total_runs = pipeline_status['total_runs']
                successful_runs = pipeline_status['successful_runs']
                failed_runs = pipeline_status['failed_runs']
                
                print(f"   üìà {pipeline_name}:")
                print(f"      - Total de execu√ß√µes: {total_runs}")
                print(f"      - Sucessos: {successful_runs}")
                print(f"      - Falhas: {failed_runs}")
                
                if pipeline_status['last_run']:
                    last_run = pipeline_status['last_run']
                    last_status = last_run['status']
                    last_time = last_run['start_time']
                    print(f"      - √öltima execu√ß√£o: {last_time} ({last_status})")
        else:
            print(f"   ‚ùå Erro ao obter status: {status['error']}")
        
        # 3. Executar pipeline de treinamento ML
        print("\n3Ô∏è‚É£ Executando pipeline de treinamento ML...")
        
        try:
            print("   üîÑ Iniciando pipeline...")
            run_id = run_pipeline('ml_training', 'manual')
            print(f"      ‚úÖ Pipeline iniciado com ID: {run_id}")
            
            # Aguardar um pouco para simular execu√ß√£o
            import time
            print("      ‚è≥ Aguardando execu√ß√£o...")
            time.sleep(3)
            
            # Verificar status
            training_status = get_pipeline_status('ml_training')
            if 'error' not in training_status and training_status['last_run']:
                last_run = training_status['last_run']
                print(f"      üìä Status: {last_run['status']}")
                print(f"      ‚è±Ô∏è  Dura√ß√£o: {last_run['start_time']} a {last_run['end_time']}")
                print(f"      ‚úÖ Passos completados: {len(last_run['steps_completed'])}")
                if last_run['steps_failed']:
                    print(f"      ‚ùå Passos falharam: {len(last_run['steps_failed'])}")
                
                # Mostrar logs
                print("      üìù Logs da execu√ß√£o:")
                for log in last_run['logs'][:5]:  # Primeiros 5 logs
                    print(f"         ‚Ä¢ {log}")
                
                # Mostrar artefatos
                if last_run['artifacts']:
                    print("      üéÅ Artefatos gerados:")
                    for artifact in last_run['artifacts']:
                        print(f"         ‚Ä¢ {artifact}")
            
        except Exception as e:
            print(f"      ‚ùå Erro ao executar pipeline: {e}")
        
        # 4. Executar pipeline de monitoramento de performance
        print("\n4Ô∏è‚É£ Executando pipeline de monitoramento de performance...")
        
        try:
            print("   üîÑ Iniciando pipeline...")
            run_id = run_pipeline('performance_monitoring', 'manual')
            print(f"      ‚úÖ Pipeline iniciado com ID: {run_id}")
            
            # Aguardar execu√ß√£o
            print("      ‚è≥ Aguardando execu√ß√£o...")
            time.sleep(2)
            
            # Verificar status
            monitoring_status = get_pipeline_status('performance_monitoring')
            if 'error' not in monitoring_status and monitoring_status['last_run']:
                last_run = monitoring_status['last_run']
                print(f"      üìä Status: {last_run['status']}")
                print(f"      ‚úÖ Passos completados: {len(last_run['steps_completed'])}")
                
        except Exception as e:
            print(f"      ‚ùå Erro ao executar pipeline: {e}")
        
        # 5. Executar pipeline de valida√ß√£o de dados
        print("\n5Ô∏è‚É£ Executando pipeline de valida√ß√£o de dados...")
        
        try:
            print("   üîÑ Iniciando pipeline...")
            run_id = run_pipeline('data_validation', 'manual')
            print(f"      ‚úÖ Pipeline iniciado com ID: {run_id}")
            
            # Aguardar execu√ß√£o
            print("      ‚è≥ Aguardando execu√ß√£o...")
            time.sleep(2)
            
            # Verificar status
            validation_status = get_pipeline_status('data_validation')
            if 'error' not in validation_status and validation_status['last_run']:
                last_run = validation_status['last_run']
                print(f"      üìä Status: {last_run['status']}")
                print(f"      ‚úÖ Passos completados: {len(last_run['steps_completed'])}")
                
        except Exception as e:
            print(f"      ‚ùå Erro ao executar pipeline: {e}")
        
        # 6. Testar agendamento de pipelines
        print("\n6Ô∏è‚É£ Testando agendamento de pipelines...")
        
        try:
            # Agendar pipeline de treinamento para executar a cada hora
            new_schedule = "0 * * * *"  # A cada hora
            success = schedule_pipeline('ml_training', new_schedule)
            
            if success:
                print(f"      ‚úÖ Pipeline ml_training agendado: {new_schedule}")
                
                # Verificar novo agendamento
                updated_config = automation_pipeline.pipelines['ml_training']
                print(f"      üìÖ Novo schedule: {updated_config.schedule}")
            else:
                print("      ‚ùå Erro ao agendar pipeline")
                
        except Exception as e:
            print(f"      ‚ùå Erro no agendamento: {e}")
        
        # 7. Testar habilita√ß√£o/desabilita√ß√£o de pipelines
        print("\n7Ô∏è‚É£ Testando controle de pipelines...")
        
        try:
            # Desabilitar pipeline de valida√ß√£o de dados
            success = enable_pipeline('data_validation', False)
            
            if success:
                print("      ‚úÖ Pipeline data_validation desabilitado")
                
                # Verificar status
                updated_config = automation_pipeline.pipelines['data_validation']
                print(f"      üìä Status: {'Habilitado' if updated_config.enabled else 'Desabilitado'}")
                
                # Reabilitar
                enable_pipeline('data_validation', True)
                print("      ‚úÖ Pipeline data_validation reabilitado")
            else:
                print("      ‚ùå Erro ao alterar status do pipeline")
                
        except Exception as e:
            print(f"      ‚ùå Erro no controle: {e}")
        
        # 8. Verificar status final
        print("\n8Ô∏è‚É£ Status final dos pipelines...")
        
        final_status = get_pipeline_status()
        if 'error' not in final_status:
            total_executions = sum(status['total_runs'] for status in final_status.values())
            total_successes = sum(status['successful_runs'] for status in final_status.values())
            total_failures = sum(status['failed_runs'] for status in final_status.values())
            
            print(f"   üìä Resumo geral:")
            print(f"      - Total de execu√ß√µes: {total_executions}")
            print(f"      - Sucessos: {total_successes}")
            print(f"      - Falhas: {total_failures}")
            
            if total_executions > 0:
                success_rate = (total_successes / total_executions) * 100
                print(f"      - Taxa de sucesso: {success_rate:.1f}%")
        
        # 9. Demonstra√ß√£o de funcionalidades avan√ßadas
        print("\n9Ô∏è‚É£ Funcionalidades avan√ßadas dispon√≠veis...")
        
        advanced_features = [
            "‚úÖ Pipeline de treinamento ML automatizado",
            "‚úÖ Pipeline de deploy com rollback autom√°tico",
            "‚úÖ Monitoramento cont√≠nuo de performance",
            "‚úÖ Valida√ß√£o autom√°tica de dados",
            "‚úÖ Agendamento com express√µes cron",
            "‚úÖ Notifica√ß√µes por email e Slack",
            "‚úÖ Versionamento autom√°tico de modelos",
            "‚úÖ Backup autom√°tico antes do deploy",
            "‚úÖ Testes automatizados p√≥s-treinamento",
            "‚úÖ Coleta e an√°lise de m√©tricas",
            "‚úÖ Detec√ß√£o autom√°tica de anomalias",
            "‚úÖ Limpeza autom√°tica de dados",
            "‚úÖ Hist√≥rico completo de execu√ß√µes",
            "‚úÖ Logs detalhados de cada passo",
            "‚úÖ Artefatos persistentes"
        ]
        
        for feature in advanced_features:
            print(f"   {feature}")
        
        # 10. Pr√≥ximos passos para produ√ß√£o
        print("\nüîü Pr√≥ximos passos para produ√ß√£o...")
        
        next_steps = [
            "üåê Integrar com sistemas de CI/CD (Jenkins, GitLab CI, GitHub Actions)",
            "üê≥ Containeriza√ß√£o com Docker para portabilidade",
            "‚ò∏Ô∏è Orquestra√ß√£o com Kubernetes para escalabilidade",
            "üìä Dashboard para monitoramento de pipelines",
            "üîê Autentica√ß√£o e autoriza√ß√£o de usu√°rios",
            "üìß Configura√ß√£o de notifica√ß√µes reais",
            "üíæ Integra√ß√£o com sistemas de versionamento (Git)",
            "üß™ Testes unit√°rios e de integra√ß√£o",
            "üìà M√©tricas de performance dos pipelines",
            "üîÑ Implementar retry autom√°tico com backoff exponencial"
        ]
        
        for step in next_steps:
            print(f"   {step}")
        
        print("\nüéâ Demonstra√ß√£o do pipeline de automa√ß√£o conclu√≠da com sucesso!")
        print("\nüí° Para implementar em produ√ß√£o:")
        print("   1. Configure as notifica√ß√µes reais (email, Slack)")
        print("   2. Integre com sistemas de CI/CD existentes")
        print("   3. Implemente autentica√ß√£o e controle de acesso")
        print("   4. Configure monitoramento e alertas")
        print("   5. Implemente backup e recupera√ß√£o de desastres")
        
    except ImportError as e:
        print(f"‚ùå Erro ao importar m√≥dulos: {e}")
        print("   Certifique-se de que todas as depend√™ncias est√£o instaladas")
    except Exception as e:
        print(f"‚ùå Erro durante a demonstra√ß√£o: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
