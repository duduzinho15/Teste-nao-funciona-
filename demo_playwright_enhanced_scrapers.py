#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
DEMONSTRA√á√ÉO DOS SCRAPERS MELHORADOS COM PLAYWRIGHT
==================================================

Script para demonstrar e testar todos os scrapers melhorados usando Playwright da Microsoft.
Inclui demonstra√ß√µes dos novos scrapers implementados.

Autor: Sistema de Scraping Avan√ßado
Data: 2025-08-14
Vers√£o: 2.0 (Scrapers Melhorados)
"""

import asyncio
import logging
import time
from datetime import datetime

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def demo_sofascore_enhanced():
    """Demonstra o scraper melhorado do SofaScore."""
    print("\nüé≠ DEMONSTRA√á√ÉO DO SCRAPER SOFASCORE MELHORADO COM PLAYWRIGHT")
    print("=" * 70)
    
    try:
        # Importa o scraper melhorado
        from Coleta_de_dados.apis.sofascore.playwright_scraper_enhanced import SofaScorePlaywrightScraperEnhanced
        
        # Configura√ß√£o do scraper
        config = {
            "headless": False,  # Mostra o navegador para demonstra√ß√£o
            "timeout": 30000,
            "retry_attempts": 3
        }
        
        scraper = SofaScorePlaywrightScraperEnhanced(**config)
        
        # Coleta dados de todos os esportes
        print("üîÑ Coletando dados de todos os esportes...")
        data = await scraper.collect_all_sports_data()
        
        # Mostra resumo dos dados coletados
        print("\nüìä RESUMO DOS DADOS COLETADOS:")
        print("-" * 40)
        for sport, matches in data.items():
            print(f"üèà {sport.capitalize()}: {len(matches)} partidas")
        
        # Salva no banco de dados
        print("\nüíæ Salvando dados no banco...")
        total_saved = await scraper.save_to_database(data)
        print(f"‚úÖ Total de registros salvos: {total_saved}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro durante demonstra√ß√£o: {e}")
        return False

async def demo_social_media_collector():
    """Demonstra o coletor de redes sociais com Playwright."""
    print("\nüé≠ DEMONSTRA√á√ÉO DO COLETOR DE REDES SOCIAIS COM PLAYWRIGHT")
    print("=" * 70)
    
    try:
        # Importa o coletor melhorado
        from Coleta_de_dados.apis.social.playwright_collector import SocialMediaPlaywrightCollector
        
        # Configura√ß√£o do coletor
        config = {
            "headless": False,  # Mostra o navegador para demonstra√ß√£o
            "timeout": 30000,
            "retry_attempts": 3
        }
        
        collector = SocialMediaPlaywrightCollector(**config)
        
        # Handles das redes sociais dos clubes (exemplo)
        club_handles = {
            "Flamengo": {
                "twitter": "@Flamengo",
                "instagram": "flamengo",
                "facebook": "Flamengo"
            },
            "Palmeiras": {
                "twitter": "@Palmeiras",
                "instagram": "palmeiras",
                "facebook": "Palmeiras"
            }
        }
        
        # Coleta dados de todas as redes sociais
        print("üîÑ Coletando dados de redes sociais...")
        data = await collector.collect_all_social_media_data(club_handles)
        
        # Mostra resumo dos dados coletados
        print("\nüìä RESUMO DOS DADOS COLETADOS:")
        print("-" * 40)
        for club_name, platforms in data.items():
            print(f"üèÜ {club_name}:")
            for platform, posts in platforms.items():
                print(f"   üì± {platform.capitalize()}: {len(posts)} posts")
        
        # Salva no banco de dados
        print("\nüíæ Salvando dados no banco...")
        total_saved = await collector.save_to_database(data)
        print(f"‚úÖ Total de posts salvos: {total_saved}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro durante demonstra√ß√£o: {e}")
        return False

async def demo_news_collector():
    """Demonstra o coletor de not√≠cias com Playwright."""
    print("\nüé≠ DEMONSTRA√á√ÉO DO COLETOR DE NOT√çCIAS COM PLAYWRIGHT")
    print("=" * 70)
    
    try:
        # Importa o coletor melhorado
        from Coleta_de_dados.apis.news.playwright_collector import NewsPlaywrightCollector
        
        # Configura√ß√£o do coletor
        config = {
            "headless": False,  # Mostra o navegador para demonstra√ß√£o
            "timeout": 30000,
            "retry_attempts": 3
        }
        
        collector = NewsPlaywrightCollector(**config)
        
        # Clubes para coletar not√≠cias
        clubes = ["Flamengo", "Palmeiras", "Corinthians", "S√£o Paulo"]
        
        total_news = 0
        
        for clube in clubes:
            print(f"\nüèÜ Coletando not√≠cias para: {clube}")
            
            # Coleta not√≠cias do clube
            news = await collector.collect_all_news_for_club(clube)
            total_news += len(news)
            
            print(f"   üì∞ {len(news)} not√≠cias coletadas")
        
        print(f"\nüìä TOTAL: {total_news} not√≠cias coletadas")
        
        # Salva no banco de dados
        print("\nüíæ Salvando not√≠cias no banco...")
        # Aqui voc√™ precisaria implementar a l√≥gica para salvar no banco
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro durante demonstra√ß√£o: {e}")
        return False

async def demo_playwright_features():
    """Demonstra funcionalidades avan√ßadas do Playwright."""
    print("\nüé≠ DEMONSTRA√á√ÉO DAS FUNCIONALIDADES AVAN√áADAS DO PLAYWRIGHT")
    print("=" * 70)
    
    try:
        # Importa o scraper base
        from Coleta_de_dados.apis.playwright_base import PlaywrightBaseScraper
        
        # Configura√ß√£o do scraper
        config = {
            "headless": False,
            "timeout": 30000,
            "retry_attempts": 3,
            "enable_screenshots": True,
            "enable_har_capture": True
        }
        
        scraper = PlaywrightBaseScraper(**config)
        
        # Demonstra funcionalidades b√°sicas
        print("üîÑ Testando funcionalidades b√°sicas...")
        
        # Navega para uma p√°gina de teste
        test_url = "https://www.example.com"
        print(f"üåê Navegando para: {test_url}")
        
        # Aqui voc√™ implementaria a l√≥gica de teste
        print("‚úÖ Funcionalidades b√°sicas testadas com sucesso!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro durante demonstra√ß√£o: {e}")
        return False

async def run_all_demos():
    """Executa todas as demonstra√ß√µes."""
    print("üöÄ DEMONSTRA√á√ÉO COMPLETA DOS SCRAPERS MELHORADOS COM PLAYWRIGHT")
    print("=" * 80)
    print("üé≠ Playwright da Microsoft - Web Scraping Avan√ßado")
    print("üìä Scrapers Melhorados para ApostaPro")
    print("=" * 80)
    
    start_time = time.time()
    results = {}
    
    try:
        # Demonstra√ß√£o 1: Funcionalidades base do Playwright
        print("\n1Ô∏è‚É£ TESTANDO FUNCIONALIDADES BASE DO PLAYWRIGHT...")
        results['playwright_features'] = await demo_playwright_features()
        
        # Demonstra√ß√£o 2: Scraper do SofaScore melhorado
        print("\n2Ô∏è‚É£ TESTANDO SCRAPER SOFASCORE MELHORADO...")
        results['sofascore_enhanced'] = await demo_sofascore_enhanced()
        
        # Demonstra√ß√£o 3: Coletor de redes sociais
        print("\n3Ô∏è‚É£ TESTANDO COLETOR DE REDES SOCIAIS...")
        results['social_media'] = await demo_social_media_collector()
        
        # Demonstra√ß√£o 4: Coletor de not√≠cias
        print("\n4Ô∏è‚É£ TESTANDO COLETOR DE NOT√çCIAS...")
        results['news_collector'] = await demo_news_collector()
        
        # Resumo dos resultados
        print("\n" + "=" * 80)
        print("üìä RESUMO DOS TESTES")
        print("=" * 80)
        
        total_tests = len(results)
        successful_tests = sum(1 for result in results.values() if result)
        
        for test_name, result in results.items():
            status = "‚úÖ SUCESSO" if result else "‚ùå FALHA"
            print(f"{test_name.replace('_', ' ').title()}: {status}")
        
        print(f"\nüéØ Total de testes: {total_tests}")
        print(f"‚úÖ Testes bem-sucedidos: {successful_tests}")
        print(f"‚ùå Testes com falha: {total_tests - successful_tests}")
        
        success_rate = (successful_tests / total_tests) * 100
        print(f"üìà Taxa de sucesso: {success_rate:.1f}%")
        
        # Tempo total de execu√ß√£o
        total_time = time.time() - start_time
        print(f"\n‚è±Ô∏è Tempo total de execu√ß√£o: {total_time:.2f} segundos")
        
        if successful_tests == total_tests:
            print("\nüéâ TODOS OS TESTES FORAM EXECUTADOS COM SUCESSO!")
            print("üöÄ O sistema de scrapers com Playwright est√° funcionando perfeitamente!")
        else:
            print(f"\n‚ö†Ô∏è {total_tests - successful_tests} teste(s) falharam.")
            print("üîß Verifique os logs para identificar e corrigir os problemas.")
        
        return results
        
    except Exception as e:
        print(f"\n‚ùå Erro cr√≠tico durante execu√ß√£o: {e}")
        return None

def main():
    """Fun√ß√£o principal."""
    print("üé≠ INICIANDO DEMONSTRA√á√ÉO DOS SCRAPERS MELHORADOS COM PLAYWRIGHT")
    print("=" * 80)
    
    try:
        # Executa todas as demonstra√ß√µes
        results = asyncio.run(run_all_demos())
        
        if results:
            print("\n‚úÖ Demonstra√ß√£o conclu√≠da!")
        else:
            print("\n‚ùå Demonstra√ß√£o falhou!")
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Demonstra√ß√£o interrompida pelo usu√°rio.")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
