version: '3.8'

services:
  # Serviço principal RapidAPI
  rapidapi:
    build: .
    container_name: rapidapi-production
    restart: unless-stopped
    ports:
      - "8080:8080"  # Dashboard
      - "9090:9090"  # Prometheus
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - ML_TRAINING_INTERVAL_HOURS=24
      - PROMETHEUS_EXPORT_INTERVAL=15
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
      - ./config:/app/config
      - ./.env:/app/.env:ro
    networks:
      - rapidapi-network
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis para cache e sessões
  redis:
    image: redis:7-alpine
    container_name: rapidapi-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - rapidapi-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-rapidapi123}

  # PostgreSQL para dados persistentes
  postgres:
    image: postgres:15-alpine
    container_name: rapidapi-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=rapidapi
      - POSTGRES_USER=rapidapi
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-rapidapi123}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - rapidapi-network

  # Grafana para dashboards
  grafana:
    image: grafana/grafana:10.0.0
    container_name: rapidapi-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - rapidapi-network
    depends_on:
      - prometheus

  # Prometheus para métricas
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: rapidapi-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - rapidapi-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Nginx como reverse proxy e load balancer
  nginx:
    image: nginx:alpine
    container_name: rapidapi-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs:/var/log/nginx
    networks:
      - rapidapi-network
    depends_on:
      - rapidapi
      - grafana
      - prometheus

  # Traefik para roteamento automático (alternativa ao Nginx)
  traefik:
    image: traefik:v2.10
    container_name: rapidapi-traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8081:8080"  # Dashboard Traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml
      - ./traefik/dynamic.yml:/etc/traefik/dynamic.yml
    networks:
      - rapidapi-network
    profiles:
      - traefik

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  grafana-data:
    driver: local
  prometheus-data:
    driver: local

networks:
  rapidapi-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
