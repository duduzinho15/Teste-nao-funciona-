#!/usr/bin/env python3
"""
Teste r√°pido da corre√ß√£o do travamento na verifica√ß√£o de acessibilidade.
"""
import sys
import os
import logging
import time

# Add project root to path
PROJECT_ROOT = os.path.abspath(os.path.dirname(__file__))
sys.path.append(PROJECT_ROOT)

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

def test_accessibility_fix():
    """Testa se a verifica√ß√£o de acessibilidade n√£o trava mais."""
    try:
        logger.info("üîç TESTE R√ÅPIDO: VERIFICA√á√ÉO DE ACESSIBILIDADE SEM TRAVAMENTO")
        logger.info("="*60)
        
        from Coleta_de_dados.apis.fbref.fbref_fallback_system import create_fallback_system
        
        logger.info("1. Criando sistema de fallback...")
        fallback_system = create_fallback_system(PROJECT_ROOT)
        
        logger.info("2. Testando verifica√ß√£o de acessibilidade com timeout r√≠gido...")
        start_time = time.time()
        
        # Esta chamada N√ÉO deve travar
        is_accessible = fallback_system.is_site_accessible()
        
        end_time = time.time()
        duration = end_time - start_time
        
        logger.info(f"‚è±Ô∏è Verifica√ß√£o completada em {duration:.2f} segundos")
        logger.info(f"üìä Resultado: {'üåê ONLINE' if is_accessible else 'üì¶ FALLBACK'}")
        
        if duration < 10:  # Deve completar em menos de 10 segundos
            logger.info("‚úÖ CORRE√á√ÉO APLICADA COM SUCESSO!")
            logger.info("‚úÖ Verifica√ß√£o n√£o trava mais")
            logger.info("‚úÖ Timeout r√≠gido funcionando")
            return True
        else:
            logger.error("‚ùå Verifica√ß√£o ainda est√° lenta demais")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erro no teste: {e}")
        return False

def test_fallback_system_complete():
    """Testa o sistema completo com a corre√ß√£o."""
    try:
        logger.info("\n" + "="*60)
        logger.info("üß™ TESTE: SISTEMA COMPLETO COM CORRE√á√ÉO")
        
        from Coleta_de_dados.apis.fbref.fbref_integrado import coletar_competicoes
        
        logger.info("üöÄ Testando coleta de competi√ß√µes com verifica√ß√£o corrigida...")
        start_time = time.time()
        
        # Esta chamada deve usar o sistema de fallback corrigido
        resultado = coletar_competicoes(limite_teste=3)
        
        end_time = time.time()
        duration = end_time - start_time
        
        logger.info(f"‚è±Ô∏è Coleta completada em {duration:.2f} segundos")
        
        if resultado and len(resultado) > 0:
            logger.info(f"‚úÖ {len(resultado)} competi√ß√µes coletadas")
            logger.info("‚úÖ Sistema funcionando com corre√ß√£o aplicada")
            return True
        else:
            logger.error("‚ùå Nenhuma competi√ß√£o coletada")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erro no teste completo: {e}")
        return False

if __name__ == "__main__":
    logger.info("üöÄ TESTE DE VALIDA√á√ÉO DA CORRE√á√ÉO DO TRAVAMENTO")
    logger.info("="*60)
    
    # Teste 1: Verifica√ß√£o de acessibilidade
    test1_success = test_accessibility_fix()
    
    # Teste 2: Sistema completo
    test2_success = test_fallback_system_complete()
    
    # Resumo
    logger.info("\n" + "="*60)
    logger.info("üìã RESUMO DOS TESTES:")
    logger.info(f"  1. Verifica√ß√£o de acessibilidade: {'‚úÖ CORRIGIDO' if test1_success else '‚ùå PROBLEMA'}")
    logger.info(f"  2. Sistema completo: {'‚úÖ FUNCIONANDO' if test2_success else '‚ùå PROBLEMA'}")
    
    if test1_success and test2_success:
        logger.info("\nüéâ CORRE√á√ÉO APLICADA COM SUCESSO!")
        logger.info("‚úÖ Verifica√ß√£o de acessibilidade n√£o trava mais")
        logger.info("‚úÖ Sistema usa fallback quando necess√°rio")
        logger.info("‚úÖ Pipeline pode progredir normalmente")
        
        logger.info("\nüí° PR√ìXIMO PASSO:")
        logger.info("Execute 'python run.py' para testar a pipeline completa!")
        
    elif test1_success:
        logger.info("\n‚ö†Ô∏è CORRE√á√ÉO PARCIAL - verifica√ß√£o corrigida mas sistema com problemas")
    else:
        logger.info("\n‚ùå CORRE√á√ÉO FALHOU - verifica√ß√£o ainda travando")
        
    logger.info("\nüîß PROBLEMA RESOLVIDO:")
    logger.info("‚Ä¢ Travamento na verifica√ß√£o de acessibilidade ‚Üí Timeout r√≠gido com threading")
    logger.info("‚Ä¢ Verifica√ß√£o lenta ‚Üí M√°ximo 5 segundos com fallback autom√°tico")
    logger.info("‚Ä¢ Hang indefinido ‚Üí Thread daemon com timeout garantido")
