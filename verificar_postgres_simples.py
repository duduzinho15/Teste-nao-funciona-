#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script simples para verificar a instala√ß√£o do PostgreSQL no Windows
"""
import os
import subprocess
import sys

def executar_comando(comando):
    """Executa um comando e retorna a sa√≠da"""
    try:
        resultado = subprocess.run(
            comando,
            shell=True,
            check=True,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            encoding='utf-8',
            errors='replace'
        )
        return resultado.stdout
    except subprocess.CalledProcessError as e:
        return f"ERRO: {e.stderr}" if e.stderr else f"ERRO: {e}"
    except Exception as e:
        return f"ERRO: {str(e)}"

def verificar_servico_postgres():
    """Verifica se o servi√ßo do PostgreSQL est√° em execu√ß√£o"""
    print("\nüîç Verificando status do servi√ßo PostgreSQL...")
    
    # Comando para listar servi√ßos do PostgreSQL
    comando = 'sc query | findstr /i "postgres"'
    resultado = executar_comando(comando)
    
    if resultado and not resultado.startswith("ERRO"):
        print("‚úÖ Servi√ßo PostgreSQL encontrado:")
        print(resultado)
        
        # Verifica se o servi√ßo est√° rodando
        if "RUNNING" in resultado.upper():
            print("‚úÖ O servi√ßo PostgreSQL est√° em execu√ß√£o.")
            return True
        else:
            print("‚ö†Ô∏è  O servi√ßo PostgreSQL N√ÉO est√° em execu√ß√£o.")
            return False
    else:
        print("‚ùå Nenhum servi√ßo PostgreSQL encontrado.")
        return False

def verificar_psql():
    """Verifica se o comando psql est√° dispon√≠vel"""
    print("\nüîç Verificando instala√ß√£o do cliente psql...")
    
    # Tenta encontrar o caminho do psql
    comando = 'where psql' if os.name == 'nt' else 'which psql'
    resultado = executar_comando(comando)
    
    if resultado and not resultado.startswith("ERRO"):
        psql_path = resultado.split('\n')[0].strip()
        print(f"‚úÖ psql encontrado em: {psql_path}")
        
        # Tenta obter a vers√£o
        versao = executar_comando(f'"{psql_path}" --version')
        if versao and not versao.startswith("ERRO"):
            print(f"‚úÖ {versao.strip()}")
        else:
            print("‚ö†Ô∏è  N√£o foi poss√≠vel obter a vers√£o do psql")
        
        return True
    else:
        print("‚ùå psql n√£o encontrado no PATH.")
        print("   Certifique-se de que o diret√≥rio bin do PostgreSQL est√° no PATH do sistema.")
        return False

def verificar_variaveis_ambiente():
    """Verifica as vari√°veis de ambiente do PostgreSQL"""
    print("\nüîç Verificando vari√°veis de ambiente do PostgreSQL...")
    
    variaveis = [
        'PGDATA', 'PGHOST', 'PGPORT', 'PGUSER', 'PGPASSWORD',
        'PGDATABASE', 'PGSERVICE', 'PGSSLMODE', 'PGREQUIRESSL'
    ]
    
    encontradas = False
    for var in variaveis:
        valor = os.environ.get(var)
        if valor:
            print(f"‚úÖ {var} = {valor}")
            encontradas = True
    
    if not encontradas:
        print("‚ÑπÔ∏è  Nenhuma vari√°vel de ambiente do PostgreSQL encontrada.")

def testar_conexao():
    """Tenta conectar ao PostgreSQL"""
    print("\nüîç Testando conex√£o com o PostgreSQL...")
    
    # Tenta encontrar o psql
    comando = 'where psql' if os.name == 'nt' else 'which psql'
    resultado = executar_comando(comando)
    
    if resultado and not resultado.startswith("ERRO"):
        psql_path = resultado.split('\n')[0].strip()
        
        # Tenta conectar usando psql
        comando = f'"{psql_path}" -U postgres -c "SELECT version();" -t'
        resultado = executar_comando(comando)
        
        if resultado and not resultado.startswith("ERRO"):
            print("‚úÖ Conex√£o bem-sucedida!")
            print(f"   {resultado.strip()}")
            return True
        else:
            print("‚ùå Falha na conex√£o com o PostgreSQL:")
            print(f"   {resultado}")
            return False
    else:
        print("‚ÑπÔ∏è  psql n√£o encontrado, pulando teste de conex√£o.")
        return False

def main():
    """Fun√ß√£o principal"""
    print("=== Verificador de Instala√ß√£o do PostgreSQL ===\n")
    
    # Executa as verifica√ß√µes
    verificar_servico_postgres()
    verificar_psql()
    verificar_variaveis_ambiente()
    testar_conexao()
    
    print("\n‚úÖ Verifica√ß√£o conclu√≠da.")

if __name__ == "__main__":
    main()
    input("\nPressione Enter para sair...")
