#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
TESTE DA IMPLEMENTA√á√ÉO RAPIDAPI
================================

Script para testar a implementa√ß√£o do m√≥dulo RapidAPI e sistema de logs centralizado.
Verifica se todas as funcionalidades est√£o funcionando corretamente.

Autor: Sistema de Coleta de Dados
Data: 2025-08-14
Vers√£o: 1.0
"""

import sys
import os
import time
import json
from datetime import datetime

# Adicionar caminho para importar m√≥dulos
sys.path.append(os.path.abspath('.'))

def test_imports():
    """Testa se todos os m√≥dulos podem ser importados."""
    print("üß™ TESTANDO IMPORTA√á√ïES...")
    
    try:
        # Testar importa√ß√£o do sistema de logs
        from Coleta_de_dados.utils.logger_centralizado import (
            CentralizedLogger, log_info, log_error, log_performance_decorator
        )
        print("‚úÖ Sistema de logs centralizado importado com sucesso")
        
        # Testar importa√ß√£o do m√≥dulo RapidAPI
        from Coleta_de_dados.apis.rapidapi.base_rapidapi import RapidAPIBase, RapidAPIConfig
        print("‚úÖ Classe base RapidAPI importada com sucesso")
        
        # Testar importa√ß√£o da API espec√≠fica
        from Coleta_de_dados.apis.rapidapi.today_football_prediction import TodayFootballPredictionAPI
        print("‚úÖ API Today Football Prediction importada com sucesso")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Erro na importa√ß√£o: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        return False

def test_logger_system():
    """Testa o sistema de logs centralizado."""
    print("\nüß™ TESTANDO SISTEMA DE LOGS...")
    
    try:
        from Coleta_de_dados.utils.logger_centralizado import (
            CentralizedLogger, log_info, log_error, log_performance_decorator
        )
        
        # Criar inst√¢ncia do logger
        logger = CentralizedLogger("logs_teste")
        print("‚úÖ Logger centralizado criado")
        
        # Testar logs b√°sicos
        log_info("teste", "test_logger_system", "Teste de log de informa√ß√£o", {"teste": True})
        log_error("teste", "test_logger_system", "Teste de log de erro", {"teste": True}, "Erro simulado")
        print("‚úÖ Logs b√°sicos funcionando")
        
        # Testar decorator de performance
        @log_performance_decorator("teste")
        def funcao_teste():
            time.sleep(0.1)  # Simular trabalho
            return "sucesso"
        
        resultado = funcao_teste()
        print(f"‚úÖ Decorator de performance funcionando: {resultado}")
        
        # Verificar estat√≠sticas
        stats = logger.get_stats()
        print(f"‚úÖ Estat√≠sticas coletadas: {stats['total_logs']} logs")
        
        # Verificar alertas
        alertas = logger.get_alerts()
        print(f"‚úÖ Alertas coletados: {len(alertas)} alertas")
        
        # Parar monitoramento
        logger.stop_monitoring()
        print("‚úÖ Sistema de logs testado com sucesso")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no sistema de logs: {e}")
        return False

def test_rapidapi_base():
    """Testa a classe base do RapidAPI."""
    print("\nüß™ TESTANDO CLASSE BASE RAPIDAPI...")
    
    try:
        from Coleta_de_dados.apis.rapidapi.base_rapidapi import RapidAPIBase, RapidAPIConfig
        
        # Criar configura√ß√£o de teste
        config = RapidAPIConfig(
            nome="API Teste",
            host="test.api.com",
            endpoint_base="https://test.api.com",
            chaves=["chave_teste_1", "chave_teste_2"],
            limite_requisicoes_dia=100,
            limite_requisicoes_minuto=10
        )
        print("‚úÖ Configura√ß√£o criada")
        
        # Criar uma classe de teste que implementa os m√©todos abstratos
        class TestRapidAPI(RapidAPIBase):
            def coletar_jogos(self, **kwargs):
                return []
            
            def coletar_jogadores(self, **kwargs):
                return []
            
            def coletar_ligas(self, **kwargs):
                return []
            
            def coletar_estatisticas(self, **kwargs):
                return []
            
            def coletar_odds(self, **kwargs):
                return []
            
            def coletar_noticias(self, **kwargs):
                return []
        
        # Testar rota√ß√£o de chaves
        api = TestRapidAPI(config)
        chave1 = api._get_next_api_key()
        chave2 = api._get_next_api_key()
        chave3 = api._get_next_api_key()
        
        print(f"‚úÖ Rota√ß√£o de chaves: {chave1[:10]}... -> {chave2[:10]}... -> {chave3[:10]}...")
        
        # Verificar se voltou ao in√≠cio
        assert chave3 == chave1, "Rota√ß√£o de chaves n√£o est√° funcionando corretamente"
        
        # Testar status
        status = api.get_status()
        print(f"‚úÖ Status da API: {status['nome']}")
        
        # Testar reset de contadores
        api.reset_counters()
        print("‚úÖ Reset de contadores funcionando")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na classe base: {e}")
        return False

def test_today_football_prediction_api():
    """Testa a API Today Football Prediction."""
    print("\nüß™ TESTANDO API TODAY FOOTBALL PREDICTION...")
    
    try:
        from Coleta_de_dados.apis.rapidapi.today_football_prediction import TodayFootballPredictionAPI
        
        # Criar API com chaves de teste
        api = TodayFootballPredictionAPI(["chave_teste_1", "chave_teste_2"])
        print("‚úÖ API criada com sucesso")
        
        # Testar m√©todos (sem fazer requisi√ß√µes reais)
        print("‚úÖ M√©todos dispon√≠veis:")
        print(f"   - coletar_jogos: {hasattr(api, 'coletar_jogos')}")
        print(f"   - coletar_jogadores: {hasattr(api, 'coletar_jogadores')}")
        print(f"   - coletar_ligas: {hasattr(api, 'coletar_ligas')}")
        print(f"   - coletar_estatisticas: {hasattr(api, 'coletar_estatisticas')}")
        print(f"   - coletar_odds: {hasattr(api, 'coletar_odds')}")
        print(f"   - coletar_noticias: {hasattr(api, 'coletar_noticias')}")
        
        # Testar status
        status = api.get_status()
        print(f"‚úÖ Status: {status['nome']} - {status['chaves_disponiveis']} chaves")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na API Today Football Prediction: {e}")
        return False

def test_integration():
    """Testa a integra√ß√£o entre os sistemas."""
    print("\nüß™ TESTANDO INTEGRA√á√ÉO...")
    
    try:
        from Coleta_de_dados.utils.logger_centralizado import log_info, log_performance_decorator
        from Coleta_de_dados.apis.rapidapi.today_football_prediction import TodayFootballPredictionAPI
        
        # Simular coleta com logging
        @log_performance_decorator("rapidapi")
        def simular_coleta():
            """Simula uma coleta de dados."""
            log_info("rapidapi", "simular_coleta", "Iniciando simula√ß√£o de coleta")
            
            # Simular trabalho
            time.sleep(0.2)
            
            log_info("rapidapi", "simular_coleta", "Simula√ß√£o conclu√≠da", {"registros": 100})
            return {"sucesso": True, "registros": 100}
        
        resultado = simular_coleta()
        print(f"‚úÖ Integra√ß√£o funcionando: {resultado}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na integra√ß√£o: {e}")
        return False

def run_all_tests():
    """Executa todos os testes."""
    print("üöÄ INICIANDO TESTES DA IMPLEMENTA√á√ÉO RAPIDAPI")
    print("=" * 60)
    
    start_time = time.time()
    results = {}
    
    # Teste 1: Importa√ß√µes
    print("\n1Ô∏è‚É£ TESTANDO IMPORTA√á√ïES...")
    results['imports'] = test_imports()
    
    # Teste 2: Sistema de logs
    print("\n2Ô∏è‚É£ TESTANDO SISTEMA DE LOGS...")
    results['logger'] = test_logger_system()
    
    # Teste 3: Classe base RapidAPI
    print("\n3Ô∏è‚É£ TESTANDO CLASSE BASE RAPIDAPI...")
    results['rapidapi_base'] = test_rapidapi_base()
    
    # Teste 4: API espec√≠fica
    print("\n4Ô∏è‚É£ TESTANDO API TODAY FOOTBALL PREDICTION...")
    results['today_api'] = test_today_football_prediction_api()
    
    # Teste 5: Integra√ß√£o
    print("\n5Ô∏è‚É£ TESTANDO INTEGRA√á√ÉO...")
    results['integration'] = test_integration()
    
    # Resumo dos resultados
    print("\n" + "=" * 60)
    print("üìä RESUMO DOS TESTES")
    print("=" * 60)
    
    total_tests = len(results)
    successful_tests = sum(1 for result in results.values() if result)
    
    for test_name, result in results.items():
        status = "‚úÖ SUCESSO" if result else "‚ùå FALHA"
        print(f"{test_name.replace('_', ' ').title()}: {status}")
    
    print(f"\nüéØ Total de testes: {total_tests}")
    print(f"‚úÖ Testes bem-sucedidos: {successful_tests}")
    print(f"‚ùå Testes com falha: {total_tests - successful_tests}")
    
    success_rate = (successful_tests / total_tests) * 100
    print(f"üìà Taxa de sucesso: {success_rate:.1f}%")
    
    # Tempo total de execu√ß√£o
    total_time = time.time() - start_time
    print(f"\n‚è±Ô∏è Tempo total de execu√ß√£o: {total_time:.2f} segundos")
    
    if successful_tests == total_tests:
        print("\nüéâ TODOS OS TESTES FORAM EXECUTADOS COM SUCESSO!")
        print("üöÄ O m√≥dulo RapidAPI est√° funcionando perfeitamente!")
        print("\nüìã PR√ìXIMOS PASSOS:")
        print("   1. Implementar as outras APIs do RapidAPI")
        print("   2. Integrar com o sistema de coleta principal")
        print("   3. Configurar chaves de API reais")
        print("   4. Executar testes com dados reais")
    else:
        print(f"\n‚ö†Ô∏è {total_tests - successful_tests} teste(s) falharam.")
        print("üîß Verifique os erros acima e corrija os problemas.")
    
    return results

def main():
    """Fun√ß√£o principal."""
    try:
        results = run_all_tests()
        
        if results:
            print("\n‚úÖ Testes conclu√≠dos!")
            return 0
        else:
            print("\n‚ùå Testes falharam!")
            return 1
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Testes interrompidos pelo usu√°rio.")
        return 1
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
