#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
TESTE DE INTEGRA√á√ÉO - NOT√çCIAS VIA API
==================================

Script para testar o fluxo completo de coleta e exposi√ß√£o de not√≠cias de clubes:
1. Coleta not√≠cias de um clube
2. Verifica se os dados foram salvos no banco de dados
3. Inicia a API localmente
4. Testa o endpoint da API para validar os dados
5. Gera relat√≥rio de teste
"""

import os
import sys
import time
import logging
import traceback
import subprocess
from typing import Dict, List, Optional, Any
import requests
from requests.exceptions import RequestException
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from datetime import datetime, timedelta
import random

# Adicionar o diret√≥rio raiz ao path para importa√ß√µes
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('test_integracao_noticias.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

class TesteIntegracaoNoticias:
    """Classe para testar a integra√ß√£o de not√≠cias com a API."""
    
    # Inicializa√ß√£o dos atributos como vari√°veis de classe
    logger = logging.getLogger(__name__)
    test_results = {}
    api_process = None
    api_url = "http://localhost:8000"
    api_key = "apostapro-api-key-change-in-production"  # Chave padr√£o de desenvolvimento
    engine = None
    Session = None
    
    @classmethod
    def setup_class(cls):
        """Configura√ß√£o da classe de teste."""
        # Configurar logger para arquivo
        cls.logger = logging.getLogger('test_news_api')
        cls.logger.setLevel(logging.INFO)
        
        # Criar handler para arquivo se n√£o existir
        if not any(isinstance(h, logging.FileHandler) for h in cls.logger.handlers):
            file_handler = logging.FileHandler('test_news_integration.log', mode='w')
            file_handler.setLevel(logging.INFO)
            formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
            file_handler.setFormatter(formatter)
            cls.logger.addHandler(file_handler)
        
        # Configurar handler para console
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        console_formatter = logging.Formatter('%(levelname)s - %(message)s')
        console_handler.setFormatter(console_formatter)
        cls.logger.addHandler(console_handler)
        
        cls.test_results = {}
        cls.api_process = None
        cls.api_url = "http://localhost:8000"
        cls.api_key = "apostapro-api-key-change-in-production"
        cls.logger.info("üîß Configura√ß√£o da classe de teste conclu√≠da")
    
    @classmethod
    def setup_database(cls) -> bool:
        """Configura a conex√£o com o banco de dados."""
        try:
            cls.logger.info("üîç Configurando conex√£o com o banco de dados...")
            
            # Configura√ß√£o do banco de dados (ajuste conforme necess√°rio)
            db_url = os.getenv('DATABASE_URL', 'postgresql://apostapro_user:apostapro_pass@localhost:5432/apostapro_db')
            cls.logger.info(f"Conectando ao banco de dados: {db_url}")
            
            # Criar engine com configura√ß√µes b√°sicas
            cls.engine = create_engine(db_url, pool_pre_ping=True)
            cls.Session = sessionmaker(bind=cls.engine)
            
            # Testar conex√£o
            with cls.engine.connect() as conn:
                conn.execute(text("SELECT 1"))
                
            cls.logger.info("‚úÖ Conex√£o com o banco de dados bem-sucedida")
            return True
            
        except Exception as e:
            cls.logger.error(f"‚ùå Falha na conex√£o com o banco de dados: {e}")
            cls.logger.error(traceback.format_exc())
            return False
    
    @classmethod
    def obter_clube_teste(cls) -> Optional[Dict]:
        """Obt√©m um clube para teste."""
        try:
            session = cls.Session()
            
            # Buscar um clube que tenha not√≠cias
            query = text("""
                SELECT c.id, c.nome, COUNT(n.id) as total_noticias
                FROM clubes c
                LEFT JOIN noticias_clubes n ON c.id = n.clube_id
                GROUP BY c.id, c.nome
                ORDER BY total_noticias DESC
                LIMIT 1
            """)
            
            result = session.execute(query).fetchone()
            
            if not result:
                # Se n√£o houver not√≠cias, buscar qualquer clube
                query = text("SELECT id, nome FROM clubes LIMIT 1")
                result = session.execute(query).fetchone()
                
                if not result:
                    self.logger.warning("Nenhum clube encontrado no banco de dados")
                    return None
                
                clube = {
                    'id': result[0],
                    'nome': result[1],
                    'total_noticias': 0
                }
            else:
                clube = {
                    'id': result[0],
                    'nome': result[1],
                    'total_noticias': result[2] or 0
                }
            
            session.close()
            return clube
            
        except Exception as e:
            self.logger.error(f"Erro ao buscar clube para teste: {e}")
            self.logger.error(traceback.format_exc())
            return None
    
    def criar_noticia_teste(self, clube_id: int) -> Dict:
        """Cria uma not√≠cia de teste para o clube especificado."""
        try:
            session = self.Session()
            
            # Gerar dados de teste
            titulo = f"Not√≠cia de teste para clube ID {clube_id}"
            url_noticia = f"https://exemplo.com/noticia/teste-{clube_id}-{int(time.time())}"
            fonte = "Teste Automatizado"
            data_publicacao = datetime.now()
            
            # Inserir not√≠cia de teste
            query = text("""
                INSERT INTO noticias_clubes 
                (clube_id, titulo, url_noticia, fonte, data_publicacao, resumo, conteudo_completo, autor, imagem_destaque)
                VALUES 
                (:clube_id, :titulo, :url_noticia, :fonte, :data_publicacao, :resumo, :conteudo_completo, :autor, :imagem_destaque)
                RETURNING id
            """)
            
            result = session.execute(
                query,
                {
                    'clube_id': clube_id,
                    'titulo': titulo,
                    'url_noticia': url_noticia,
                    'fonte': fonte,
                    'data_publicacao': data_publicacao,
                    'resumo': "Este √© um resumo de teste para a not√≠cia de teste.",
                    'conteudo_completo': "Este √© o conte√∫do completo da not√≠cia de teste. " * 10,
                    'autor': "Sistema de Teste",
                    'imagem_destaque': f"https://exemplo.com/imagens/teste-{clube_id}.jpg"
                }
            )
            
            noticia_id = result.fetchone()[0]
            session.commit()
            
            noticia = {
                'id': noticia_id,
                'clube_id': clube_id,
                'titulo': titulo,
                'url_noticia': url_noticia,
                'fonte': fonte,
                'data_publicacao': data_publicacao.isoformat()
            }
            
            self.logger.info(f"‚úÖ Not√≠cia de teste criada com sucesso: ID {noticia_id}")
            return noticia
            
        except Exception as e:
            session.rollback()
            self.logger.error(f"‚ùå Erro ao criar not√≠cia de teste: {e}")
            return None
            
        finally:
            session.close()
    
    @classmethod
    def start_api(cls) -> bool:
        """Inicia a API em um processo separado."""
        try:
            cls.logger.info("üöÄ Iniciando a API...")
            
            # Comando para iniciar a API (ajuste conforme necess√°rio)
            cmd = ["python", "-m", "uvicorn", "api.main:app", "--host", "0.0.0.0", "--port", "8000"]
            cls.api_process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                encoding='utf-8',
                errors='replace'
            )
            
            # Dar um tempo para a API iniciar
            time.sleep(5)
            
            # Verificar se a API est√° respondendo
            try:
                response = requests.get(f"{cls.api_url}/health", timeout=10)
                if response.status_code == 200:
                    cls.logger.info("‚úÖ API iniciada com sucesso")
                    return True
                else:
                    cls.logger.error(f"‚ùå Falha ao iniciar a API: {response.text}")
                    return False
                    
            except requests.exceptions.RequestException as e:
                cls.logger.error(f"‚ùå Erro ao conectar √† API: {e}")
                return False
                
        except Exception as e:
            cls.logger.error(f"‚ùå Erro ao iniciar a API: {e}")
            cls.logger.error(traceback.format_exc())
            return False
    
    @classmethod
    def stop_api(cls):
        """Para o processo da API."""
        if cls.api_process:
            cls.logger.info("üõë Parando a API...")
            cls.api_process.terminate()
            try:
                cls.api_process.wait(timeout=5)
            except subprocess.TimeoutExpired:
                cls.api_process.kill()
            cls.logger.info("‚úÖ API parada")
    
    @classmethod
    def _testar_endpoint_noticias_clube(cls, clube_id: int) -> bool:
        """Testa o endpoint de not√≠cias por clube."""
        try:
            cls.logger.info(f"üß™ Testando endpoint de not√≠cias para o clube ID: {clube_id}")
            
            headers = {
                "X-API-Key": cls.api_key,
                "Content-Type": "application/json"
            }
            
            # Testar par√¢metros de pagina√ß√£o
            for page in [1, 2]:
                for per_page in [5, 10]:
                    url = f"{cls.api_url}/api/v1/clubs/{clube_id}/news?page={page}&per_page={per_page}"
                    response = requests.get(url, headers=headers)
                    
                    # Verificar status code
                    if response.status_code != 200:
                        cls.logger.error(f"‚ùå Erro no endpoint de not√≠cias. Status: {response.status_code}")
                        cls.logger.error(f"Resposta: {response.text}")
                        return False
                    
                    # Verificar schema da resposta
                    try:
                        data = response.json()
                        
                        # Verificar estrutura b√°sica
                        if not all(key in data for key in ["items", "total", "page", "per_page"]):
                            cls.logger.error("‚ùå Estrutura da resposta inv√°lida")
                            return False
                            
                        # Verificar itens
                        for item in data["items"]:
                            if not all(key in item for key in ["id", "titulo", "conteudo", "data_publicacao", "fonte"]):
                                cls.logger.error("‚ùå Item de not√≠cia inv√°lido")
                                return False
                                
                        cls.logger.info(f"‚úÖ Teste de pagina√ß√£o (p√°gina {page}, {per_page} itens) passou")
                        
                    except ValueError as e:
                        cls.logger.error(f"‚ùå Resposta n√£o √© um JSON v√°lido: {e}")
                        return False
            
            cls.logger.info("‚úÖ Todos os testes de pagina√ß√£o passaram")
            return True
            
        except Exception as e:
            cls.logger.error(f"‚ùå Erro ao testar endpoint de not√≠cias: {e}")
            cls.logger.error(traceback.format_exc())
            return False
    
    @classmethod
    def _testar_endpoint_noticias_invalido(cls) -> bool:
        """Testa o endpoint de not√≠cias com par√¢metros inv√°lidos."""
        try:
            cls.logger.info("üß™ Testando endpoint de not√≠cias com par√¢metros inv√°lidos")
            
            headers = {
                "X-API-Key": cls.api_key,
                "Content-Type": "application/json"
            }
            
            # Testar com ID de clube inv√°lido
            response = requests.get(f"{cls.api_url}/api/v1/clubs/999999/news", headers=headers)
            if response.status_code != 404:
                cls.logger.error(f"‚ùå Status code inesperado para clube inexistente: {response.status_code}")
                return False
                
            # Testar com par√¢metros de pagina√ß√£o inv√°lidos
            for test_url in [
                f"{cls.api_url}/api/v1/clubs/1/news?page=0",
                f"{cls.api_url}/api/v1/clubs/1/news?per_page=0",
                f"{cls.api_url}/api/v1/clubs/1/news?page=abc",
                f"{cls.api_url}/api/v1/clubs/1/news?per_page=abc"
            ]:
                response = requests.get(test_url, headers=headers)
                if response.status_code != 422:  # 422 Unprocessable Entity para valida√ß√£o falha
                    cls.logger.error(f"‚ùå Status code inesperado para par√¢metros inv√°lidos em {test_url}: {response.status_code}")
                    return False
            
            cls.logger.info("‚úÖ Testes com par√¢metros inv√°lidos passaram")
            return True
            
        except Exception as e:
            cls.logger.error(f"‚ùå Erro ao testar endpoint com par√¢metros inv√°lidos: {e}")
            cls.logger.error(traceback.format_exc())
            return False
    
    @classmethod
    def _testar_endpoint_noticia_especifica(cls, noticia_id: int) -> bool:
        """Testa o endpoint de uma not√≠cia espec√≠fica."""
        try:
            cls.logger.info(f"üîç Testando endpoint /api/v1/news/{noticia_id}...")
            
            headers = {
                "X-API-Key": cls.api_key
            }
            
            response = requests.get(
                f"{cls.api_url}/api/v1/news/{noticia_id}",
                headers=headers
            )
            
            if response.status_code != 200:
                cls.logger.error(f"‚ùå Falha ao buscar not√≠cia. Status code: {response.status_code}")
                return False
            
            data = response.json()
            
            # Validar estrutura da resposta
            required_fields = ["id", "clube_id", "titulo", "url_noticia", "fonte", "data_publicacao"]
            for field in required_fields:
                if field not in data:
                    cls.logger.error(f"‚ùå Campo obrigat√≥rio ausente na resposta: {field}")
                    return False
            
            cls.logger.info(f"‚úÖ Not√≠cia encontrada: {data['titulo']}")
            return True
            
        except Exception as e:
            cls.logger.error(f"‚ùå Erro ao testar endpoint de not√≠cia espec√≠fica: {e}")
            cls.logger.error(traceback.format_exc())
            return False
    
    @classmethod
    def test_news_endpoints(cls):
        """Testa todos os endpoints de not√≠cias."""
        cls.test_results = {}
        sucesso_geral = True
        
        # 1. Configurar banco de dados
        if not cls.setup_database():
            cls.logger.error("‚ùå Falha ao configurar o banco de dados")
            return False
            
        # 2. Iniciar a API
        if not cls.start_api():
            cls.logger.error("‚ùå Falha ao iniciar a API")
            return False
            
        try:
            # 3. Testar endpoints
            cls.logger.info("\nüîç Iniciando testes de integra√ß√£o...")
            
            # Testar endpoint de not√≠cias inv√°lidas
            cls.logger.info("\nüß™ Testando endpoint com par√¢metros inv√°lidos...")
            if cls._testar_endpoint_noticias_invalido():
                cls.test_results["test_invalid_params"] = "‚úÖ Passou"
            else:
                cls.test_results["test_invalid_params"] = "‚ùå Falhou"
                sucesso_geral = False
            
            # Testar endpoint de not√≠cias por clube (usando um ID de clube conhecido)
            clube_id = 1  # Ajuste para um ID de clube v√°lido no seu banco de dados
            cls.logger.info(f"\nüß™ Testando endpoint de not√≠cias para o clube ID: {clube_id}...")
            if cls._testar_endpoint_noticias_clube(clube_id):
                cls.test_results["test_club_news"] = "‚úÖ Passou"
            else:
                cls.test_results["test_club_news"] = "‚ùå Falhou"
                sucesso_geral = False
            
            # Se o teste de not√≠cias por clube passou, testar not√≠cia espec√≠fica
            if sucesso_geral and hasattr(cls, 'ultima_noticia_id'):
                cls.logger.info(f"\nüß™ Testando endpoint de not√≠cia espec√≠fica ID: {cls.ultima_noticia_id}...")
                if cls._testar_endpoint_noticia_especifica(cls.ultima_noticia_id):
                    cls.test_results["test_single_news"] = "‚úÖ Passou"
                else:
                    cls.test_results["test_single_news"] = "‚ùå Falhou"
                    sucesso_geral = False
            
            # Exibir resultados
            cls.logger.info("\nüìä Resultados dos testes:")
            for teste, resultado in cls.test_results.items():
                cls.logger.info(f"{teste}: {resultado}")
            
            return sucesso_geral
            
        except Exception as e:
            cls.logger.error(f"‚ùå Erro durante a execu√ß√£o dos testes: {e}")
            cls.logger.error(traceback.format_exc())
            return False
            
        finally:
            # 4. Parar a API
            cls.stop_api()
            cls.logger.info("\nüèÅ Testes conclu√≠dos")
        """Executa todos os testes de integra√ß√£o."""
        cls.test_results = {}
        sucesso_geral = True
        
        # 1. Configurar banco de dados
        self.test_results['setup_database'] = self.setup_database()
        if not self.test_results['setup_database']:
            self.logger.error("‚ùå Falha na configura√ß√£o do banco de dados. Abortando teste.")
            return False
        
        # 2. Obter ou criar um clube para teste
        clube = self.obter_clube_teste()
        if not clube:
            self.logger.error("‚ùå N√£o foi poss√≠vel obter um clube para teste.")
            return False
        
        self.logger.info(f"üèÜ Clube selecionado para teste: {clube['nome']} (ID: {clube['id']})")
        
        # 3. Se n√£o houver not√≠cias, criar uma
        if clube['total_noticias'] == 0:
            self.logger.info("‚ÑπÔ∏è  Nenhuma not√≠cia encontrada para o clube. Criando not√≠cia de teste...")
            noticia = self.criar_noticia_teste(clube['id'])
            if not noticia:
                self.logger.error("‚ùå Falha ao criar not√≠cia de teste.")
                return False
        
        # 4. Iniciar a API
        self.test_results['iniciar_api'] = self.iniciar_api()
        if not self.test_results['iniciar_api']:
            self.logger.error("‚ùå Falha ao iniciar a API. Abortando teste.")
            self.parar_api()
            return False
        
        # 5. Testar endpoints
        try:
            # Testar endpoint de not√≠cias por clube
            self.test_results['testar_endpoint_noticias'] = self.testar_endpoint_noticias_clube(clube['id'])
            
            # Se todos os testes passaram
            sucesso_geral = all(self.test_results.values())
            
            if sucesso_geral:
                self.logger.info("‚úÖ‚úÖ‚úÖ TODOS OS TESTES PASSARAM COM SUCESSO! ‚úÖ‚úÖ‚úÖ")
            else:
                self.logger.error("‚ùå‚ùå‚ùå ALGUNS TESTES FALHARAM. VERIFIQUE OS LOGS. ‚ùå‚ùå‚ùå")
                
                # Log detalhado dos resultados
                self.logger.info("\nüìä RESUMO DOS TESTES:")
                for teste, resultado in self.test_results.items():
                    status = "‚úÖ PASSOU" if resultado else "‚ùå FALHOU"
                    self.logger.info(f"{status} - {teste}")
            
            return sucesso_geral
            
        except Exception as e:
            self.logger.error(f"‚ùå‚ùå‚ùå ERRO INESPERADO DURANTE OS TESTES: {e}")
            self.logger.error(traceback.format_exc())
            return False
            
        finally:
            # 6. Parar a API
            self.parar_api()

def main() -> int:
    """Fun√ß√£o principal."""
    logger.info("üöÄ INICIANDO TESTE DE INTEGRA√á√ÉO - NOT√çCIAS VIA API")
    logger.info("=" * 60)
    
    teste = TesteIntegracaoNoticias()
    sucesso = teste.executar_teste_completo()
    
    logger.info("=" * 60)
    logger.info("‚úÖ TESTE CONCLU√çDO" if sucesso else "‚ùå TESTE FALHOU")
    
    return 0 if sucesso else 1

if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        logger.info("\n‚ùå Teste interrompido pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        logger.error(f"\n‚ùå ERRO N√ÉO TRATADO: {e}")
        logger.error(traceback.format_exc())
        sys.exit(1)
