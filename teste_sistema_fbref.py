#!/usr/bin/env python3
"""
Script de teste para verificar o funcionamento do sistema FBRef.
Testa cada m√≥dulo individualmente para garantir que est√° funcionando.
"""

import sys
import os
import logging
from datetime import datetime

# Adiciona o diret√≥rio raiz ao path
PROJECT_ROOT = os.path.abspath(os.path.dirname(__file__))
sys.path.insert(0, PROJECT_ROOT)

# Configura logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - [%(name)s] - %(message)s'
)
logger = logging.getLogger(__name__)

def testar_importacoes():
    """Testa se todos os m√≥dulos podem ser importados."""
    logger.info("üîç Testando importa√ß√µes...")
    
    try:
        from Coleta_de_dados.apis.fbref.fbref_integrado import main as descobrir_links
        from Coleta_de_dados.apis.fbref.coletar_dados_partidas import main as coletar_partidas
        from Coleta_de_dados.apis.fbref.coletar_estatisticas_detalhadas import main as coletar_estatisticas
        from Coleta_de_dados.apis.fbref.verificar_extracao import VerificadorExtracao
        from Coleta_de_dados.apis.fbref.coletar_clubes import ColetorClubes
        from Coleta_de_dados.apis.fbref.coletar_jogadores import ColetorJogadores
        from Coleta_de_dados.apis.fbref.orquestrador_coleta import OrquestradorColeta
        
        logger.info("‚úÖ Todas as importa√ß√µes funcionaram!")
        return True
    except ImportError as e:
        logger.error(f"‚ùå Erro na importa√ß√£o: {e}")
        return False

def testar_banco_dados():
    """Testa se o banco de dados pode ser criado."""
    logger.info("üóÑÔ∏è Testando cria√ß√£o do banco de dados...")
    
    try:
        from Banco_de_dados.criar_banco import criar_todas_as_tabelas
        criar_todas_as_tabelas()
        logger.info("‚úÖ Banco de dados criado com sucesso!")
        return True
    except Exception as e:
        logger.error(f"‚ùå Erro ao criar banco de dados: {e}")
        return False

def testar_descoberta_links():
    """Testa a descoberta de links (apenas algumas competi√ß√µes)."""
    logger.info("üîó Testando descoberta de links...")
    
    try:
        from Coleta_de_dados.apis.fbref.fbref_integrado import coletar_competicoes
        
        competicoes = coletar_competicoes()
        if competicoes:
            logger.info(f"‚úÖ Encontradas {len(competicoes)} competi√ß√µes")
            # Mostra algumas competi√ß√µes como exemplo
            for i, comp in enumerate(competicoes[:5]):
                logger.info(f"  {i+1}. {comp['nome']} ({comp['contexto']})")
            return True
        else:
            logger.warning("‚ö†Ô∏è Nenhuma competi√ß√£o encontrada")
            return False
    except Exception as e:
        logger.error(f"‚ùå Erro na descoberta de links: {e}")
        return False

def testar_verificacao_extracao():
    """Testa o sistema de verifica√ß√£o de extra√ß√£o."""
    logger.info("üîç Testando sistema de verifica√ß√£o...")
    
    try:
        from Coleta_de_dados.apis.fbref.verificar_extracao import VerificadorExtracao
        
        verificador = VerificadorExtracao()
        stats = verificador.executar_verificacao_completa()
        
        logger.info(f"‚úÖ Verifica√ß√£o conclu√≠da:")
        logger.info(f"  - Competi√ß√µes verificadas: {stats['competicoes_verificadas']}")
        logger.info(f"  - Competi√ß√µes completas: {stats['competicoes_completas']}")
        logger.info(f"  - Competi√ß√µes incompletas: {stats['competicoes_incompletas']}")
        
        return True
    except Exception as e:
        logger.error(f"‚ùå Erro na verifica√ß√£o: {e}")
        return False

def testar_coleta_clubes():
    """Testa a coleta de clubes (apenas alguns pa√≠ses)."""
    logger.info("üèüÔ∏è Testando coleta de clubes...")
    
    try:
        from Coleta_de_dados.apis.fbref.coletar_clubes import ColetorClubes
        
        coletor = ColetorClubes()
        coletor.setup_database_clubes()
        
        # Testa apenas com alguns pa√≠ses para n√£o sobrecarregar
        paises = coletor.coletar_paises_clubes()
        if paises:
            logger.info(f"‚úÖ Encontrados {len(paises)} pa√≠ses")
            # Testa com o primeiro pa√≠s
            if len(paises) > 0:
                pais_teste = paises[0]
                clubes = coletor.coletar_clubes_do_pais(pais_teste)
                logger.info(f"‚úÖ Encontrados {len(clubes)} clubes em {pais_teste.nome}")
                return True
        else:
            logger.warning("‚ö†Ô∏è Nenhum pa√≠s encontrado")
            return False
    except Exception as e:
        logger.error(f"‚ùå Erro na coleta de clubes: {e}")
        return False

def testar_coleta_jogadores():
    """Testa a coleta de jogadores (apenas alguns pa√≠ses)."""
    logger.info("‚öΩ Testando coleta de jogadores...")
    
    try:
        from Coleta_de_dados.apis.fbref.coletar_jogadores import ColetorJogadores
        
        coletor = ColetorJogadores()
        coletor.setup_database_jogadores()
        
        # Testa apenas com alguns pa√≠ses para n√£o sobrecarregar
        paises = coletor.coletar_paises_jogadores()
        if paises:
            logger.info(f"‚úÖ Encontrados {len(paises)} pa√≠ses")
            # Testa com o primeiro pa√≠s
            if len(paises) > 0:
                pais_teste = paises[0]
                jogadores = coletor.coletar_jogadores_do_pais(pais_teste)
                logger.info(f"‚úÖ Encontrados {len(jogadores)} jogadores em {pais_teste.nome}")
                return True
        else:
            logger.warning("‚ö†Ô∏è Nenhum pa√≠s encontrado")
            return False
    except Exception as e:
        logger.error(f"‚ùå Erro na coleta de jogadores: {e}")
        return False

def testar_orquestrador():
    """Testa o orquestrador (apenas listagem de etapas)."""
    logger.info("üéº Testando orquestrador...")
    
    try:
        from Coleta_de_dados.apis.fbref.orquestrador_coleta import OrquestradorColeta
        
        orquestrador = OrquestradorColeta()
        orquestrador.listar_etapas()
        
        logger.info("‚úÖ Orquestrador funcionando!")
        return True
    except Exception as e:
        logger.error(f"‚ùå Erro no orquestrador: {e}")
        return False

def executar_testes_completos():
    """Executa todos os testes."""
    logger.info("üöÄ Iniciando testes completos do sistema FBRef...")
    logger.info("="*80)
    
    testes = [
        ("Importa√ß√µes", testar_importacoes),
        ("Banco de Dados", testar_banco_dados),
        ("Descoberta de Links", testar_descoberta_links),
        ("Verifica√ß√£o de Extra√ß√£o", testar_verificacao_extracao),
        ("Coleta de Clubes", testar_coleta_clubes),
        ("Coleta de Jogadores", testar_coleta_jogadores),
        ("Orquestrador", testar_orquestrador),
    ]
    
    resultados = {}
    
    for nome_teste, funcao_teste in testes:
        logger.info(f"\nüìã Executando teste: {nome_teste}")
        try:
            sucesso = funcao_teste()
            resultados[nome_teste] = sucesso
            if sucesso:
                logger.info(f"‚úÖ {nome_teste}: PASSOU")
            else:
                logger.warning(f"‚ö†Ô∏è {nome_teste}: FALHOU")
        except Exception as e:
            logger.error(f"‚ùå {nome_teste}: ERRO - {e}")
            resultados[nome_teste] = False
    
    # Relat√≥rio final
    logger.info("\n" + "="*80)
    logger.info("üìä RELAT√ìRIO FINAL DOS TESTES")
    logger.info("="*80)
    
    testes_passaram = sum(1 for resultado in resultados.values() if resultado)
    total_testes = len(resultados)
    
    for nome_teste, resultado in resultados.items():
        status = "‚úÖ PASSOU" if resultado else "‚ùå FALHOU"
        logger.info(f"  {status} | {nome_teste}")
    
    logger.info(f"\nüìà Resultado: {testes_passaram}/{total_testes} testes passaram")
    
    if testes_passaram == total_testes:
        logger.info("üéâ Todos os testes passaram! Sistema funcionando perfeitamente.")
    elif testes_passaram >= total_testes * 0.7:
        logger.warning("‚ö†Ô∏è Maioria dos testes passou. Alguns ajustes podem ser necess√°rios.")
    else:
        logger.error("‚ùå Muitos testes falharam. Verifique o sistema.")
    
    logger.info("="*80)
    
    return resultados

if __name__ == "__main__":
    resultados = executar_testes_completos()
    
    # Retorna c√≥digo de sa√≠da baseado nos resultados
    testes_passaram = sum(1 for resultado in resultados.values() if resultado)
    total_testes = len(resultados)
    
    if testes_passaram == total_testes:
        sys.exit(0)  # Sucesso
    else:
        sys.exit(1)  # Falha 