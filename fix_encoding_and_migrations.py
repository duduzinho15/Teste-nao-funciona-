#!/usr/bin/env python3
"""
Script para corrigir problemas de encoding e for√ßar a aplica√ß√£o de migra√ß√µes
"""
import psycopg2
import sys
import os
from psycopg2 import sql
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT

# Configura√ß√µes de conex√£o
DB_CONFIG = {
    'host': 'localhost',
    'port': 5432,
    'dbname': 'apostapro_db',
    'user': 'postgres',  # Usando superusu√°rio para opera√ß√µes administrativas
    'password': 'postgres'  # Senha padr√£o do PostgreSQL no Windows
}

def get_connection(dbname=None):
    """Estabelece conex√£o com o banco de dados"""
    params = DB_CONFIG.copy()
    if dbname:
        params['dbname'] = dbname
    
    try:
        conn = psycopg2.connect(**params)
        conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        return conn
    except Exception as e:
        print(f"‚ùå Erro ao conectar ao banco de dados: {e}")
        return None

def check_database_encoding(conn):
    """Verifica o encoding do banco de dados"""
    try:
        with conn.cursor() as cur:
            cur.execute("SELECT datname, pg_encoding_to_char(encoding) FROM pg_database WHERE datname = %s;", 
                       (DB_CONFIG['dbname'],))
            result = cur.fetchone()
            if result:
                db_name, encoding = result
                print(f"‚úÖ Banco de dados '{db_name}' est√° usando encoding: {encoding}")
                return encoding
            else:
                print(f"‚ùå Banco de dados '{DB_CONFIG['dbname']}' n√£o encontrado.")
                return None
    except Exception as e:
        print(f"‚ùå Erro ao verificar encoding: {e}")
        return None

def list_tables(conn):
    """Lista todas as tabelas no esquema p√∫blico"""
    try:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
                ORDER BY table_name;
            """)
            tables = [row[0] for row in cur.fetchall()]
            
            if tables:
                print("\nüìã Tabelas encontradas:")
                for table in tables:
                    print(f"- {table}")
            else:
                print("\n‚ÑπÔ∏è  Nenhuma tabela encontrada no esquema p√∫blico.")
            
            return tables
    except Exception as e:
        print(f"‚ùå Erro ao listar tabelas: {e}")
        return []

def check_alembic_version(conn):
    """Verifica a vers√£o atual do Alembic"""
    try:
        with conn.cursor() as cur:
            # Verifica se a tabela alembic_version existe
            cur.execute("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name = 'alembic_version';
            """)
            
            if not cur.fetchone():
                print("\n‚ö†Ô∏è  Tabela 'alembic_version' n√£o encontrada.")
                return None
            
            # Obt√©m a vers√£o atual do Alembic
            cur.execute("SELECT version_num FROM alembic_version;")
            version = cur.fetchone()
            if version:
                version = version[0]
                print(f"\n‚ÑπÔ∏è  Vers√£o atual do Alembic: {version}")
                return version
            else:
                print("\n‚ö†Ô∏è  N√£o foi poss√≠vel determinar a vers√£o do Alembic.")
                return None
                
    except Exception as e:
        print(f"‚ùå Erro ao verificar vers√£o do Alembic: {e}")
        return None

def force_migration():
    """For√ßa a aplica√ß√£o da migra√ß√£o para a tabela posts_redes_sociais"""
    # Conecta ao banco de dados postgres para poder recriar o banco se necess√°rio
    conn = get_connection('postgres')
    if not conn:
        print("‚ùå N√£o foi poss√≠vel conectar ao servidor PostgreSQL.")
        return False
    
    try:
        with conn.cursor() as cur:
            # Verifica se o banco de dados existe
            cur.execute("SELECT 1 FROM pg_database WHERE datname = %s", (DB_CONFIG['dbname'],))
            db_exists = cur.fetchone() is not None
            
            if not db_exists:
                print(f"\n‚ÑπÔ∏è  Banco de dados '{DB_CONFIG['dbname']}' n√£o existe. Criando...")
                cur.execute(sql.SQL("CREATE DATABASE {}").format(sql.Identifier(DB_CONFIG['dbname'])))
                print(f"‚úÖ Banco de dados '{DB_CONFIG['dbname']}' criado com sucesso!")
    
    except Exception as e:
        print(f"‚ùå Erro ao verificar/criar banco de dados: {e}")
        return False
    finally:
        conn.close()
    
    # Agora conecta ao banco de dados espec√≠fico
    conn = get_connection()
    if not conn:
        return False
    
    try:
        # Verifica o encoding do banco de dados
        encoding = check_database_encoding(conn)
        if not encoding or encoding.upper() != 'UTF8':
            print(f"\n‚ö†Ô∏è  O banco de dados n√£o est√° usando UTF-8. Isso pode causar problemas de codifica√ß√£o.")
            print("   Considere recriar o banco de dados com o encoding correto.")
        
        # Lista as tabelas atuais
        current_tables = list_tables(conn)
        
        # Verifica a vers√£o do Alembic
        current_version = check_alembic_version(conn)
        
        # Verifica se a tabela posts_redes_sociais j√° existe
        if 'posts_redes_sociais' in current_tables:
            print("\n‚úÖ A tabela 'posts_redes_sociais' j√° existe no banco de dados.")
            return True
            
        # Se chegou aqui, a tabela n√£o existe e precisamos for√ßar a migra√ß√£o
        print("\nüîß A tabela 'posts_redes_sociais' n√£o foi encontrada. For√ßando a migra√ß√£o...")
        
        # Aqui voc√™ pode adicionar o c√≥digo SQL para criar a tabela manualmente
        # ou executar o comando Alembic para aplicar as migra√ß√µes
        print("\nPara for√ßar a migra√ß√£o, execute o seguinte comando no terminal:")
        print(f"cd {os.path.dirname(os.path.abspath(__file__))}")
        print("alembic upgrade head")
        print("\nOu execute o seguinte comando SQL diretamente no banco de dados:")
        print("""
CREATE TABLE IF NOT EXISTS posts_redes_sociais (
    id SERIAL PRIMARY KEY,
    clube_id INTEGER NOT NULL,
    rede_social VARCHAR(50) NOT NULL,
    post_id VARCHAR(100) NOT NULL,
    conteudo TEXT NOT NULL,
    data_postagem TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    curtidas INTEGER NOT NULL,
    comentarios INTEGER NOT NULL,
    compartilhamentos INTEGER NOT NULL,
    url_post TEXT,
    midia_url TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (clube_id) REFERENCES clubes(id) ON DELETE CASCADE,
    CONSTRAINT uq_post_rede_social_id UNIQUE (rede_social, post_id)
);

CREATE INDEX IF NOT EXISTS idx_posts_redes_sociais_clube ON posts_redes_sociais(clube_id);
CREATE INDEX IF NOT EXISTS idx_posts_redes_sociais_data ON posts_redes_sociais(data_postagem);
CREATE INDEX IF NOT EXISTS idx_posts_redes_sociais_post_id ON posts_redes_sociais(post_id);
CREATE INDEX IF NOT EXISTS idx_posts_redes_sociais_rede ON posts_redes_sociais(rede_social);
        """)
        
        return False
        
    except Exception as e:
        print(f"‚ùå Erro ao for√ßar migra√ß√£o: {e}")
        return False
    finally:
        conn.close()

def main():
    print("üîß Ferramenta de Corre√ß√£o de Encoding e Migra√ß√µes")
    print("=" * 60)
    
    # Verifica se o PostgreSQL est√° rodando
    print("\nüîç Verificando conex√£o com o PostgreSQL...")
    conn = get_connection('postgres')
    if not conn:
        print("‚ùå N√£o foi poss√≠vel conectar ao servidor PostgreSQL.")
        print("\nVerifique se o servi√ßo PostgreSQL est√° em execu√ß√£o e tente novamente.")
        return
    
    print("‚úÖ Conectado ao servidor PostgreSQL com sucesso!")
    conn.close()
    
    # For√ßa a migra√ß√£o
    success = force_migration()
    
    if success:
        print("\n‚úÖ Tarefas conclu√≠das com sucesso!")
    else:
        print("\n‚ö†Ô∏è  Algumas tarefas podem n√£o ter sido conclu√≠das com sucesso. Verifique as mensagens acima.")

if __name__ == "__main__":
    main()
