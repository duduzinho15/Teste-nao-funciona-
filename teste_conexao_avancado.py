import psycopg2
from psycopg2 import sql
import sys
import os

def testar_conexao_avancada():
    """Testa diferentes abordagens para conectar ao PostgreSQL"""
    print("üîç Iniciando teste avan√ßado de conex√£o ao PostgreSQL...")
    
    # Lista de configura√ß√µes para testar
    configs = [
        {
            'name': 'Conex√£o direta com tratamento de erros',
            'host': 'localhost',
            'port': 5432,
            'dbname': 'postgres',  # Primeiro tentamos conectar ao banco padr√£o
            'user': 'postgres',
            'password': 'postgres',
            'client_encoding': 'UTF8',
            'options': '-c client_encoding=UTF8',
            'connect_timeout': 5
        },
        {
            'name': 'Conex√£o sem especificar encoding',
            'host': 'localhost',
            'port': 5432,
            'dbname': 'postgres',
            'user': 'postgres',
            'password': 'postgres',
            'connect_timeout': 5
        },
        {
            'name': 'Conex√£o via Unix socket (Windows)',
            'host': '/var/run/postgresql',  # Caminho t√≠pico para socket no Windows
            'port': 5432,
            'dbname': 'postgres',
            'user': 'postgres',
            'password': 'postgres',
            'connect_timeout': 5
        }
    ]
    
    for config in configs:
        # Extrair o nome da configura√ß√£o e remover do dicion√°rio de conex√£o
        config_name = config.pop('name', 'Configura√ß√£o sem nome')
        print(f"\nüîß Testando configura√ß√£o: {config_name}")
        print(f"üìå Par√¢metros: { {k: v for k, v in config.items() if k != 'password'} }")
        
        try:
            # Tentar conex√£o com tratamento de erros espec√≠fico para encoding
            conn = psycopg2.connect(**{k: v for k, v in config.items() if k != 'name'})
            print("‚úÖ Conex√£o bem-sucedida!")
            
            # Obter informa√ß√µes do servidor
            with conn.cursor() as cur:
                # Vers√£o do PostgreSQL
                cur.execute("SELECT version();")
                print(f"üìä {cur.fetchone()[0]}")
                
                # Encoding atual
                cur.execute("SHOW server_encoding;")
                print(f"üî§ Server Encoding: {cur.fetchone()[0]}")
                
                cur.execute("SHOW client_encoding;")
                print(f"üî§ Client Encoding: {cur.fetchone()[0]}")
                
                # Listar bancos de dados
                cur.execute("SELECT datname, pg_encoding_to_char(encoding), datcollate, datctype FROM pg_database;")
                print("\nüìä Bancos de dados:")
                for db in cur.fetchall():
                    print(f" - {db[0]} (Encoding: {db[1]}, Collate: {db[2]}, Ctype: {db[3]})")
            
            conn.close()
            return True
            
        except UnicodeDecodeError as e:
            print(f"‚ùå Erro de decodifica√ß√£o: {e}")
            print("   Tentando com tratamento de erros...")
            
            try:
                # Tentar novamente com tratamento de erros de decodifica√ß√£o
                conn = psycopg2.connect(**config)
                conn.set_client_encoding('UTF8')
                
                with conn.cursor() as cur:
                    cur.execute("SELECT version();")
                    print(f"‚úÖ Conex√£o bem-sucedida com tratamento de erros!")
                    print(f"üìä {cur.fetchone()[0]}")
                
                conn.close()
                return True
                
            except Exception as inner_e:
                print(f"‚ùå Falha mesmo com tratamento de erros: {inner_e}")
                
        except Exception as e:
            print(f"‚ùå Erro na conex√£o: {e}")
    
    print("\n‚ùå Nenhuma das configura√ß√µes de conex√£o funcionou.")
    return False

def verificar_servico_windows():
    """Verifica o status do servi√ßo PostgreSQL no Windows"""
    print("\nüîç Verificando status do servi√ßo PostgreSQL no Windows...")
    
    try:
        # Usar o comando 'sc' para verificar o status do servi√ßo
        service_name = "postgresql-x64-17"  # Nome padr√£o para PostgreSQL 17
        
        # Verificar se o servi√ßo existe
        result = os.popen(f'sc query {service_name}').read()
        
        if '1060' in result:
            print(f"‚ùå O servi√ßo '{service_name}' n√£o foi encontrado.")
            print("   Tente executar como administrador ou verifique o nome do servi√ßo.")
            return False
            
        print(f"‚úÖ Servi√ßo encontrado: {service_name}")
        
        # Verificar status
        if 'RUNNING' in result:
            print("‚úÖ O servi√ßo est√° em execu√ß√£o.")
        else:
            print("‚ö†Ô∏è  O servi√ßo N√ÉO est√° em execu√ß√£o.")
            print("   Para iniciar o servi√ßo, execute como administrador:")
            print(f"   net start {service_name}")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar o servi√ßo: {e}")
        return False

if __name__ == "__main__":
    print("""
üõ†Ô∏è  Ferramenta Avan√ßada de Diagn√≥stico de Conex√£o PostgreSQL
""" + "=" * 70)
    
    # Verificar status do servi√ßo no Windows
    verificar_servico_windows()
    
    # Testar diferentes configura√ß√µes de conex√£o
    if not testar_conexao_avancada():
        print("\nüîß Recomenda√ß√µes:")
        print("1. Verifique se o servi√ßo PostgreSQL est√° em execu√ß√£o")
        print("2. Confirme se o usu√°rio/senha est√£o corretos")
        print("3. Tente conectar manualmente com: psql -h localhost -p 5432 -U postgres")
        print("4. Verifique se a porta 5432 n√£o est√° bloqueada pelo firewall")
        print("5. Consulte os logs do PostgreSQL para erros de inicializa√ß√£o")
    
    input("\nPressione Enter para sair...")
